apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'org.kordamp.markdown.convert'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'com.moowork.node'
apply plugin: 'project-report' // adds dependencyReport and htmlDependencyReport tasks
apply plugin: 'com.diffplug.gradle.spotless'

sourceCompatibility = 1.8

boolean isTestEnv = project.hasProperty("testEnv")
String dbContainerName = isTestEnv ? "anet-mssql-test-server" : "anet-mssql-server"

// Defaults for development variables
run.environment("DB_DRIVER", "sqlserver")
run.environment("ANET_DB_SERVER", "localhost")
run.environment("ANET_DB_NAME", isTestEnv ? "testAnet" : "devAnet")
run.environment("ANET_DB_USERNAME", isTestEnv ? "anetTestUser" : "anetDevUser")
run.environment("ANET_DB_PASSWORD", isTestEnv ? "Test-P@ssw0rd" : "Dev-P@ssw0rd")
run.environment("ANET_SA_PASSWORD", "SA-P@ssw0rd")
run.environment("ANET_DB_PORT", "1433")
run.environment("ANET_DB_EXPOSED_PORT", isTestEnv ? "1434" : "1433")
run.environment("ANET_PORT", isTestEnv ? "8180" : "8080")
run.environment("ANET_ADMIN_PORT", isTestEnv ? "8181" : "8081")

// If defined, load alternatives for variables
if (!isTestEnv && file('localSettings.gradle').exists()) {
	apply from: 'localSettings.gradle'
} else if (isTestEnv && file('localTestSettings.gradle').exists()) {
	apply from: 'localTestSettings.gradle'
}

// In this section you declare where to find the dependencies of your project
repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
	maven { url "https://repo.spring.io/plugins-release" }
}

// In this section you declare the dependencies for your production and test code
dependencies {
	// The production code uses the SLF4J logging API at compile time
	compile group: 'io.dropwizard', name: 'dropwizard-core', version: '1.3.9'
	compile group: 'io.dropwizard', name: 'dropwizard-jdbi3', version: '1.3.9'
	compile group: 'io.dropwizard', name: 'dropwizard-migrations', version: '1.3.9'
	compile group: 'io.dropwizard', name: 'dropwizard-auth', version: '1.3.9'
	compile group: 'io.dropwizard', name: 'dropwizard-views-freemarker', version: '1.3.9'
	compile group: 'io.dropwizard', name: 'dropwizard-assets', version: '1.3.9'
	compile 'ru.vyarus.guicey:guicey-jdbi3:0.6.0'
	compile 'com.google.guava:guava:27.1-jre' // Pick the non-Android version of Guice

	compile 'org.xerial:sqlite-jdbc:3.27.2.1' //If using SQLite
	compile group: 'org.postgresql', name: 'postgresql', version: '42.1.4' // If using postgresql
	compile group: 'org.liquibase', name: 'liquibase-core', version: '3.6.3' // or newer, for postgresql dropPrimaryKey fix [CORE-3129]

	compile 'javax.mail:mail:1.4.7'
	compile 'ch.qos.logback:logback-classic:1.2.3'
	compile 'ch.qos.logback:logback-core:1.2.3'
	compile 'ch.qos.logback:logback-access:1.2.3'
	compile 'com.github.waffle:waffle-jna:1.9.1'
	compile 'com.graphql-java:graphql-java:11.0'
	compile 'com.graphql-java:java-dataloader:2.2.1'
	compile 'io.leangen.graphql:spqr:0.9.9'
	compile 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20190325.1'

	// Used for converting GraphQL request output to XML:
	compile 'com.github.javadev:underscore-lodash:1.26'
	// For JSON schema validation
	compile 'com.github.everit-org.json-schema:org.everit.json.schema:1.11.1'

	compile 'com.microsoft.sqlserver:mssql-jdbc:7.2.1.jre8'

	// used for writing Excel documents
	compile group: 'org.apache.poi', name: 'poi', version: '4.0.1'
	compile group: 'org.apache.poi', name: 'poi-ooxml', version: '4.0.1'

	// For parsing HTML to check for 'empty' input
	compile 'org.jsoup:jsoup:1.11.3'

	testCompile group: 'io.dropwizard', name: 'dropwizard-testing', version: '1.3.9'
	testCompile group: 'io.dropwizard', name: 'dropwizard-client', version: '1.3.9'
	testCompile 'org.apache.commons:commons-io:1.3.2'
}

jacoco {
    toolVersion = "0.8.1"
}

jacocoTestReport {
    reports {
        xml.enabled true
		html.enabled false
	}
}

//Set project version to git tag
def proc = "git describe".execute(null, projectDir);
proc.waitFor();
project.version = proc.text.trim();

def projectBranch = "git rev-parse --abbrev-ref HEAD".execute(null, projectDir);
projectBranch.waitFor();
projectBranch = projectBranch.text.trim();

project.group = "ncia"

mainClassName = "mil.dds.anet.AnetApplication"
String anetConfig = "anet.yml"

applicationDefaultJvmArgs = ["-Djava.library.path=MY_APP_HOME/lib"]

// Set up developer DB parameters, with sensible defaults:
String dbDriver = run.environment['DB_DRIVER'] ?: 'sqlite'
String dbLoc = run.environment['ANET_DB_SERVER'] ?: 'localhost'
String dbName = run.environment['ANET_DB_NAME'] ?: 'anet'

if (run.environment['ANET_DB_EXPOSED_PORT']) {
	dbLoc = dbLoc + ":" + run.environment['ANET_DB_EXPOSED_PORT'].toString()
}
if (!run.environment['ANET_DB_USERNAME']) {
	run.environment('ANET_DB_USERNAME', run.environment['USER'])
}

if (dbDriver == "sqlserver") {
	run.environment("ANET_DB_DRIVER", "com.microsoft.sqlserver.jdbc.SQLServerDriver")
	run.environment("ANET_DB_URL", "jdbc:sqlserver://${dbLoc};databaseName=${dbName}")
} else if (dbDriver == "postgresql") {
	run.environment("ANET_DB_DRIVER", "org.postgresql.Driver")
	run.environment("ANET_DB_URL", "jdbc:postgresql://${dbLoc}/${dbName}")
} else if (dbDriver == "sqlite") {
	run.environment("ANET_DB_DRIVER", "org.sqlite.JDBC")
	run.environment("ANET_DB_URL", "jdbc:sqlite:development.db?foreign_keys=on")
	run.environment("ANET_DB_DATE_STRING_FORMAT", "yyyy-MM-dd hh:mm:ss.SSS Z")
	run.environment("ANET_DB_DATE_CLASS", "text")
} else {
	throw new GradleException( "Unsupported DB_DRIVER value \'${dbDriver}\'")
}

test.environment = run.environment

run.args = ["server", anetConfig]

task checkConfig(dependsOn: 'compileJava', type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["check", anetConfig]
}

task buildClient(dependsOn: 'yarn', type: YarnTask) {
	group = "build"
	description = "Builds the client application."
	inputs.file("client/yarn.lock").withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.dir("client/src").withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.dir("client/config").withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.dir("client/public").withPathSensitivity(PathSensitivity.RELATIVE)
	outputs.dir("$buildDir/resources/main/assets/client")
	outputs.cacheIf { true }
	args = ['run', 'build']
}

task dbInit(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database initialization command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["init", anetConfig]
	standardInput = System.in
}

task dbStatus(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database status (Liquibase) command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["db", "status", anetConfig]
}

task dbMigrate(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database migration (Liquibase) command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["db", "migrate", anetConfig]
	if (project.hasProperty("dry-run")) {
		args += "--dry-run"
	}
}

task dbTest(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database migration test (Liquibase) command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["db", "test", anetConfig]
}

task dbRollback(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database migration rollback (Liquibase) command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["db", "rollback", anetConfig, "--count", "1"]
	if (project.hasProperty("dry-run")) {
		args += "--dry-run"
	}
}

task dbDrop(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database drop-all (Liquibase) command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["db", "drop-all", "--confirm-delete-everything", anetConfig]
}

task dbLoad(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database load command; loads demo data."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["dbScript", "-S", "insertBaseData.sql", anetConfig]
}

task dockerBuildImage(dependsOn: installDist, type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
	description = "Builds anet-app-server container image."
	doFirst {
		copy {
			from 'docker/anet-app-server/Dockerfile'
			into 'build/install'
		}
	}
	inputDir =  project.file('build/install')
	def resultTags = ['ncia/anet-app-server:'+project.version]
	if (projectBranch=="candidate")
		resultTags << 'ncia/anet-app-server:'+projectBranch
	if (projectBranch=="master")
		resultTags << 'ncia/anet-app-server:latest'
	tags = resultTags
}

task dockerPushCandidateImage(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage) {
	imageName = 'ncia/anet-app-server'
	tag = 'candidate'
}

task dockerPushLatestImage(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage) {
	imageName = 'ncia/anet-app-server'
	tag = 'latest'
}

task dockerPushImage(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage) {
	imageName = 'ncia/anet-app-server'
	tag = project.version
}

task dockerPullDB(type: com.bmuschko.gradle.docker.tasks.image.DockerPullImage) {
	group = "database container"
	repository = "ncia/anet-mssql-linux"
	description = "Pulls a docker image for the ANET DB from " + repository + "."
	tag = "latest"
}

task dockerCreateDB(dependsOn: dockerPullDB, type: com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer) {
	group = "database container"
	imageId = dockerPullDB.getImageId()
	containerName = dbContainerName
	description = "Creates an ANET MS SQL DB container named " + dbContainerName + "."
	binds = ["${projectDir}":"/hostdata"] + run.environment.get("DOCKER_MOUNTS", [:])
	withEnvVar('ACCEPT_EULA', 'Y')
	withEnvVar('SA_PASSWORD', run.environment["ANET_SA_PASSWORD"])
	withEnvVar('DB_NAME', run.environment["ANET_DB_NAME"])
	withEnvVar('DB_USER', run.environment["ANET_DB_USERNAME"])
	withEnvVar('DB_USER_PASSWORD', run.environment["ANET_DB_PASSWORD"])
	portBindings = [run.environment["ANET_DB_EXPOSED_PORT"]+":"+run.environment["ANET_DB_PORT"]]
}

// need to make this invoke dbCreateContainer if there is no anet-mssql-server and possibly get newer image if available
task dockerStartDB(type: com.bmuschko.gradle.docker.tasks.container.DockerStartContainer) {
	group = "database container"
	description = "Starts " + dbContainerName + " container."
	targetContainerId { dbContainerName }
}

task dockerStopDB(type: com.bmuschko.gradle.docker.tasks.container.DockerStopContainer) {
	group = "database container"
	description = "Stops " + dbContainerName + " container."
	targetContainerId { dbContainerName }
}

task dockerRemoveDB(type: com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer) {
	group = "database container"
	description = "Removes " + dbContainerName + " container."
	targetContainerId { dbContainerName }
}

task dockerWaitForDB(type: com.bmuschko.gradle.docker.tasks.container.DockerExecContainer) {
	group = "database container"
	description = "Waiting until the " + dbContainerName + " DB has started."
	targetContainerId { dbContainerName }
	commands = [ ["/opt/waitTillServiceStarted.sh"] ]
}

classes.dependsOn buildClient

//Configure the Java Checkstyle settings. Run with ./gradlew check
checkstyle {
	configFile = rootProject.file('config/google_checks.xml')
	toolVersion = '8.18'
}

spotless {
	java {
		importOrderFile 'config/google.importorder'
		eclipse().configFile 'config/eclipse-java-google-style.xml'
	}
}

//Configure extra files to include the distribution file
distributions {
	main {
		contents {
			into('docs/') {
				from('anet.yml') { rename('anet.yml', 'anet.yml.template') }
				from(markdownToHtml)
			}
			into('lib/') {
				from('lib/sqljdbc_auth.dll')
			}
		}
	}
}

//Add gradle plugin repos
buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.kordamp:markdown-gradle-plugin:1.2.0"
		classpath 'com.bmuschko:gradle-docker-plugin:4.7.0'
		classpath "com.moowork.gradle:gradle-node-plugin:1.3.1"
		classpath "com.diffplug.spotless:spotless-plugin-gradle:3.21.1"
	}
}

startScripts {
	doLast {
		unixScript.text = unixScript.text.replace('MY_APP_HOME', '\$APP_HOME')
		windowsScript.text = windowsScript.text.replace('MY_APP_HOME', '%APP_HOME%')
	}
}

//Configure Markdown plugin
allprojects {
	markdownToHtml.sourceDir = file("docs")
	markdownToHtml.outputDir = file("$buildDir/documentation")
	markdownToHtml.hardwraps = true
}

node {
	nodeModulesDir = file("${project.projectDir}/client")
	version = '8.11.2'
	download = true
}
