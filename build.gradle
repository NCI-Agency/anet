plugins {
	id "org.kordamp.markdown.convert" version "1.2.0"
	id "com.bmuschko.docker-remote-api" version "6.7.0"
	id "com.github.node-gradle.node" version "2.2.4"
	id "com.diffplug.spotless" version "5.9.0"
	id 'org.beryx.runtime' version '1.11.4'
	id 'nebula.ospackage' version '8.4.1'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'project-report' // adds dependencyReport and htmlDependencyReport tasks

sourceCompatibility = 11
targetCompatibility = 11

boolean isTestEnv = project.hasProperty("testEnv")

// If defined, load alternatives for variables
if (!isTestEnv && file('localSettings.gradle').exists()) {
	apply from: 'localSettings.gradle'
} else if (isTestEnv && file('localTestSettings.gradle').exists()) {
	apply from: 'localTestSettings.gradle'
}

boolean isJupyterLabEnabled = run.environment["JUPYTER_ENABLE_LAB"] == "true"

// Defaults for development variables
run.environment("DB_DRIVER", run.environment["DB_DRIVER"] ?: "sqlserver")
boolean isMssql = run.environment["DB_DRIVER"] == "sqlserver"
String dbType = isMssql ? "mssql" : "psql"
run.environment("ANET_DB_SERVER", run.environment["ANET_DB_SERVER"] ?: "localhost")
run.environment("ANET_DB_NAME", run.environment["ANET_DB_NAME"] ?: isTestEnv ? "testAnet" : "devAnet")
run.environment("ANET_DB_USERNAME", run.environment["ANET_DB_USERNAME"] ?: isTestEnv ? "anetTestUser" : "anetDevUser")
run.environment("ANET_DB_PASSWORD", run.environment["ANET_DB_PASSWORD"] ?: isTestEnv ? "Test-P@ssw0rd" : "Dev-P@ssw0rd")
run.environment("ANET_SA_PASSWORD", run.environment["ANET_SA_PASSWORD"] ?: "SA-P@ssw0rd")
run.environment("ANET_DB_PORT", run.environment["ANET_DB_PORT"] ?: isMssql ? "1433" : "5432")
run.environment("ANET_DB_EXPOSED_PORT", run.environment["ANET_DB_EXPOSED_PORT"] ?: isMssql ? (isTestEnv ? "1434" : "1433") : (isTestEnv ? "5433" : "5432"))
run.environment("ANET_PORT", run.environment["ANET_PORT"] ?: isTestEnv ? "8180" : "8080")
run.environment("ANET_ADMIN_PORT", run.environment["ANET_ADMIN_PORT"] ?: isTestEnv ? "8181" : "8081")
run.environment("ANET_SMTP_DISABLE", run.environment["ANET_SMTP_DISABLE"] ?: isTestEnv ? "false" : "true")
run.environment("ANET_SMTP_SERVER", run.environment["ANET_SMTP_SERVER"] ?: "localhost")
run.environment("ANET_SMTP_USERNAME", run.environment["ANET_SMTP_USERNAME"] ?: "")
run.environment("ANET_SMTP_PASSWORD", run.environment["ANET_SMTP_PASSWORD"] ?: "")
run.environment("ANET_SMTP_PORT", run.environment["ANET_SMTP_PORT"] ?: isTestEnv ? 1125 : 1025)
run.environment("ANET_SMTP_STARTTLS", run.environment["ANET_SMTP_STARTTLS"] ?: "true")
run.environment("ANET_SMTP_SSLTRUST", run.environment["ANET_SMTP_SSLTRUST"] ?: run.environment["ANET_SMTP_SERVER"])
run.environment("ANET_SMTP_HTTP_PORT", run.environment["ANET_SMTP_HTTP_PORT"] ?: isTestEnv ? 1180 : 1080)
run.environment("ANET_DICTIONARY_NAME", run.environment["ANET_DICTIONARY_NAME"] ?: "anet-dictionary.yml")
run.environment("ANET_JUPYTER_PORT", run.environment["ANET_JUPYTER_PORT"] ?: "5000")

String dbContainerName = isTestEnv ? "anet-${dbType}-test-server" : "anet-${dbType}-server"
String fakeSmtpContainerName = isTestEnv ? "fake-smtp-test-server" : "fake-smtp-server"
String keycloakContainerName = "keycloak-server"
String keycloakVersion = "12.0.2"

String jupyterContainerName = "jupyter_scipy_notebook"
String importFrameworkVersion = "0.1.0"
String pexFilename = "data_import_framework_" + importFrameworkVersion + ".pex"

// In this section you declare where to find the dependencies of your project
repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
	maven { url "https://repo.spring.io/plugins-release" }
	jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
	// The production code uses the SLF4J logging API at compile time
	implementation 'io.dropwizard:dropwizard-core:2.0.18'
	implementation 'io.dropwizard:dropwizard-jdbi3:2.0.18'
	implementation 'io.dropwizard:dropwizard-migrations:2.0.18'
	implementation 'io.dropwizard:dropwizard-auth:2.0.18'
	implementation 'io.dropwizard:dropwizard-views-freemarker:2.0.18'
	implementation 'io.dropwizard-bundles:dropwizard-configurable-assets-bundle:1.3.5'

	implementation 'ru.vyarus.guicey:guicey-jdbi3:5.2.0-1'
	implementation 'com.google.guava:guava:30.1-jre' // Pick the non-Android version of Guice
	implementation 'commons-collections:commons-collections:3.2.2'

	// Supported databases:
	implementation 'com.microsoft.sqlserver:mssql-jdbc:8.4.1.jre14'
	implementation 'org.postgresql:postgresql:42.2.18' // If using postgresql
	implementation 'org.liquibase:liquibase-core:4.2.2'

	// For caching domain users (used in every request in the AuthenticationFilter)
	implementation 'org.ehcache:ehcache:3.9.0'
	implementation 'javax.cache:cache-api:1.1.1'
	implementation 'commons-beanutils:commons-beanutils:1.9.4'

	implementation 'org.simplejavamail:simple-java-mail:6.4.4'
	implementation 'ch.qos.logback:logback-classic:1.2.3'
	implementation 'ch.qos.logback:logback-core:1.2.3'
	implementation 'ch.qos.logback:logback-access:1.2.3'
	implementation 'com.graphql-java:java-dataloader:2.2.3'
	implementation 'io.leangen.graphql:spqr:0.10.1'
	implementation 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20200713.1'
	implementation 'com.mikesamuel:json-sanitizer:1.2.2'
	// Authentication
	implementation 'de.ahus1.keycloak.dropwizard:keycloak-dropwizard:1.1.3'
	implementation "org.keycloak:keycloak-jetty94-adapter:${keycloakVersion}"
	implementation "org.keycloak:keycloak-jaxrs-oauth-client:${keycloakVersion}"

	// Used for converting GraphQL request output to XML:
	implementation 'com.github.javadev:underscore-lodash:1.26'
	// For JSON schema validation
	implementation 'com.qindesign:snowy-json:0.15.0'

	// used for writing Excel documents
	implementation 'org.apache.poi:poi:5.0.0'
	implementation 'org.apache.poi:poi-ooxml:5.0.0'

	// For Java 9+
	implementation 'javax.xml.bind:jaxb-api:2.3.1'

	// For parsing HTML to check for 'empty' input
	implementation 'org.jsoup:jsoup:1.13.1'

	// For fast and simple image scaling
	implementation 'net.coobird:thumbnailator:0.4.13'

	testImplementation 'io.dropwizard:dropwizard-testing:2.0.18'
	testImplementation 'io.dropwizard:dropwizard-client:2.0.18'
	testImplementation 'org.apache.commons:commons-io:1.3.2'

	testImplementation 'org.assertj:assertj-core:3.19.0'

	testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
	testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
	testImplementation 'org.powermock:powermock-module-junit4-rule:2.0.9'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

configurations {
	// Exclude transitive dependency Apache Xalan (e.g. through poi-ooxml), so we use the TransformerFactoryImpl from the JVM
	compile.exclude module: 'xalan'
}

test {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.6"
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled false
	}
}

//Set project version to git tag
def proc = "git describe".execute(null, projectDir);
proc.waitFor();
project.version = proc.text.trim();

runtime {
	options = ['--vm=server', '--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
	modules = [
			'java.sql',
			'java.desktop',
			'java.xml',
			'java.logging',
			'java.management',
			'jdk.unsupported',
			'java.security.jgss',
			'java.naming',
			'java.transaction.xa',
			'java.security.sasl',
			'java.instrument',
			'java.scripting',
			'java.xml.crypto']

	jpackage {
		appVersion = project.version.replace("-",".") // rpmbuild doesn't like versions with dashes
	}
}

processResources {
	filesMatching('**/version.properties') {
		filter {
			it.replace('APP_VERSION_TOKEN', project.version)
		}
	}
}
processResources.outputs.upToDateWhen{ false }

def getIpAddress() {
	for (NetworkInterface iface : NetworkInterface.getNetworkInterfaces()) {
		for (InterfaceAddress address : iface.getInterfaceAddresses()) {
			final String ip = address.getAddress().getHostAddress()
			if (ip.length() < 15) return ip
		}
	}
}

def projectBranch = "git rev-parse --abbrev-ref HEAD".execute(null, projectDir);
projectBranch.waitFor();
projectBranch = projectBranch.text.trim();

project.group = "ncia"

mainClassName = "mil.dds.anet.AnetApplication"
String anetConfig = "anet.yml"

applicationDefaultJvmArgs = ["-Djava.library.path=MY_APP_HOME/lib"]

String dbLoc = run.environment['ANET_DB_SERVER']
if (run.environment['ANET_DB_EXPOSED_PORT']) {
	dbLoc = dbLoc + ":" + run.environment['ANET_DB_EXPOSED_PORT'].toString()
}
if (!run.environment['ANET_DB_USERNAME']) {
	run.environment('ANET_DB_USERNAME', run.environment['USER'])
}

if (run.environment['DB_DRIVER'] == "sqlserver") {
	run.environment("ANET_DB_DRIVER", "com.microsoft.sqlserver.jdbc.SQLServerDriver")
	run.environment("ANET_DB_URL", "jdbc:sqlserver://${dbLoc};databaseName=${run.environment['ANET_DB_NAME']}")
} else if (run.environment['DB_DRIVER'] == "postgresql") {
	run.environment("ANET_DB_DRIVER", "org.postgresql.Driver")
	run.environment("ANET_DB_URL", "jdbc:postgresql://${dbLoc}/${run.environment['ANET_DB_NAME']}")
} else {
	throw new GradleException( "Unsupported DB_DRIVER value \'${run.environment['DB_DRIVER']}\'")
}

test.environment = run.environment

run.args = ["server", anetConfig]

task checkConfig(dependsOn: 'compileJava', type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["check", anetConfig]
}

task buildClient(dependsOn: 'yarn', type: YarnTask) {
	group = "build"
	description = "Builds the client application."
	inputs.file("client/yarn.lock").withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.dir("client/src").withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.dir("client/config").withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.dir("client/public").withPathSensitivity(PathSensitivity.RELATIVE)
	outputs.dir("$buildDir/resources/main/assets/client")
	outputs.cacheIf { true }
	args = ['run', 'build']
}

task dbWait(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Wait for the ANET database to become available."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["waitForDB", anetConfig]
}

task dbInit(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database initialization command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["init", anetConfig]
	standardInput = System.in
}

task dbStatus(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database status (Liquibase) command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["db", "status", anetConfig]
}

task dbPrep(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database preparation command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["dbScript", "-S", "prepare-${dbType}.sql", anetConfig]
}

task dbMigrate(dependsOn: dbPrep, type: JavaExec) {
	group = "database"
	description = "Runs the ANET database migration (Liquibase) command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["db", "migrate", anetConfig]
	if (project.hasProperty("dry-run")) {
		args += "--dry-run"
	}
}

task dbTest(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database migration test (Liquibase) command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["db", "test", anetConfig]
}

task dbRollback(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database migration rollback (Liquibase) command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["db", "rollback", anetConfig, "--count", "1"]
	if (project.hasProperty("dry-run")) {
		args += "--dry-run"
	}
}

task dbDrop(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database drop-all (Liquibase) command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["db", "drop-all", "--confirm-delete-everything", anetConfig]
}

task dbLoad(dependsOn: "dbLoad_${dbType}") {
	group = "database"
	description = "Runs the ANET database load command; loads demo data."
}

task dbLoad_mssql(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database load command for MS SQL; loads demo data."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	args = ["dbScript", "-S", "insertBaseData-mssql.sql", anetConfig]
}

task dbLoad_psql(dependsOn: "dbLoad_psql_createData", type: com.bmuschko.gradle.docker.tasks.container.DockerExecContainer) {
	group = "database"
	description = "Runs the ANET database load command for PostgreSQL; loads demo data."
	targetContainerId { dbContainerName }
	commands = [ ["psql", "-U", run.environment["ANET_DB_USERNAME"], "-d", run.environment["ANET_DB_NAME"], "-f", "/hostdata/insertBaseData-psql.sql"] as String[] ]
}

task dbLoad_psql_createData(type: Exec) {
	group = "database"
	description = "Convert the ANET demo data from MS SQL to PostgreSQL format."
	standardInput = new FileInputStream("${projectDir}/insertBaseData-mssql.sql")
	standardOutput = new FileOutputStream("${projectDir}/insertBaseData-psql.sql")
	commandLine "${projectDir}/mssql2pg.pl"
}

task dockerBuildImage(dependsOn: installDist, type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
	description = "Builds anet-app-server container image."
	doFirst {
		copy {
			from 'docker/anet-app-server/Dockerfile'
			into 'build/install'
		}
	}
	inputDir =  project.file('build/install')
	def resultTags = ['ncia/anet-app-server:'+project.version]
	if (projectBranch=="candidate")
		resultTags << 'ncia/anet-app-server:'+projectBranch
	if (projectBranch=="master")
		resultTags << 'ncia/anet-app-server:latest'
	images = resultTags
}

task dockerPushCandidateImage(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage) {
	images = ['ncia/anet-app-server:candidate']
}

task dockerPushLatestImage(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage) {
	images = ['ncia/anet-app-server:latest']
}

task dockerPushImage(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage) {
	images = ["ncia/anet-app-server:${project.version}"]
}

// Database containers (Microsoft SQL Server and PostgreSQL)

task dockerPullDB(type: com.bmuschko.gradle.docker.tasks.image.DockerPullImage) {
	group = "database container"
	image = isMssql ? "ncia/anet-mssql-linux:latest" : "postgres:latest"
	description = "Pulls a docker image for the ANET DB from ${image}."
}

task dockerCreateDB(dependsOn: dockerPullDB, type: com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer) {
	group = "database container"
	imageId = dockerPullDB.getImage()
	containerName = dbContainerName
	description = "Creates an ANET ${dbType} SQL DB container named " + dbContainerName + "."
	hostConfig.shmSize = 1024*1024*1024L
	hostConfig.binds = ["${projectDir}":"/hostdata"] + run.environment.get("DOCKER_MOUNTS", [:])
	if (isMssql) {
		withEnvVar('ACCEPT_EULA', 'Y')
		withEnvVar('SA_PASSWORD', run.environment["ANET_SA_PASSWORD"])
		withEnvVar('DB_NAME', run.environment["ANET_DB_NAME"])
		withEnvVar('DB_USER', run.environment["ANET_DB_USERNAME"])
		withEnvVar('DB_USER_PASSWORD', run.environment["ANET_DB_PASSWORD"])
	} else {
		withEnvVar('POSTGRES_DB', run.environment["ANET_DB_NAME"])
		withEnvVar('POSTGRES_USER', run.environment["ANET_DB_USERNAME"])
		withEnvVar('POSTGRES_PASSWORD', run.environment["ANET_DB_PASSWORD"])
	}
	hostConfig.portBindings = [run.environment["ANET_DB_EXPOSED_PORT"]+":"+run.environment["ANET_DB_PORT"]]
}

// need to make this invoke dockerCreateDB if there is no anet-${dbType}-server and possibly get newer image if available
task dockerStartDB(type: com.bmuschko.gradle.docker.tasks.container.DockerStartContainer) {
	group = "database container"
	description = "Starts " + dbContainerName + " container."
	targetContainerId { dbContainerName }
}

task dockerStopDB(type: com.bmuschko.gradle.docker.tasks.container.DockerStopContainer) {
	group = "database container"
	description = "Stops " + dbContainerName + " container."
	targetContainerId { dbContainerName }
}

task dockerRemoveDB(type: com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer) {
	group = "database container"
	description = "Removes " + dbContainerName + " container."
	targetContainerId { dbContainerName }
}

// Keycloak container

task dockerPullKeycloak(type: com.bmuschko.gradle.docker.tasks.image.DockerPullImage) {
	group = "keycloak container"
	image = "jboss/keycloak:${keycloakVersion}"
	description = "Pulls a docker image for keycloak from ${image}."
}

task dockerCreateKeycloak(dependsOn: dockerPullKeycloak, type: com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer) {
	group = "keycloak container"
	imageId = dockerPullKeycloak.getImage()
	containerName = keycloakContainerName
	description = "Creates a keycloak container named " + keycloakContainerName + "."
	hostConfig.portBindings = ["9080:8080", "9443:8443"]
	hostConfig.binds = ["${projectDir}":"/hostdata"] + run.environment.get("DOCKER_MOUNTS", [:])
	withEnvVar("KEYCLOAK_USER", "admin")
	withEnvVar("KEYCLOAK_PASSWORD", "admin")
	withEnvVar("KEYCLOAK_IMPORT", "/hostdata/ANET-Realm-export.json")
}

task dockerStartKeycloak(type: com.bmuschko.gradle.docker.tasks.container.DockerStartContainer) {
	group = "keycloak container"
	description = "Starts " + keycloakContainerName + " container."
	targetContainerId { keycloakContainerName }
}

task dockerExportKeycloakRealm(type: com.bmuschko.gradle.docker.tasks.container.DockerExecContainer) {
	group = "keycloak container"
	description = "Epxorts ANET-Realm from " + keycloakContainerName + " container."
	targetContainerId { keycloakContainerName }
	commands = [ ["/opt/jboss/keycloak/bin/standalone.sh", "-Djboss.socket.binding.port-offset=100", "-Dkeycloak.migration.action=export", "-Dkeycloak.migration.provider=singleFile", "-Dkeycloak.migration.realmName=ANET-Realm", "-Dkeycloak.migration.file=/hostdata/ANET-Realm-export.json", "-Dkeycloak.migration.strategy=OVERWRITE_EXISTING"] as String[] ]
}

task dockerStopKeycloak(type: com.bmuschko.gradle.docker.tasks.container.DockerStopContainer) {
	group = "keycloak container"
	description = "Stops " + keycloakContainerName + " container."
	targetContainerId { keycloakContainerName }
}

task dockerRemoveKeycloak(type: com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer) {
	group = "keycloak container"
	description = "Removes " + keycloakContainerName + " container."
	targetContainerId { keycloakContainerName }
}

// Fake SMTP server container

task dockerPullFakeSmtpServer(type: com.bmuschko.gradle.docker.tasks.image.DockerPullImage) {
	group = "fake-smtp-server container"
	image = "devoto13/fake-smtp-server:0.1.0" // No 'latest' available yet
	description = "Pulls a docker image for the fake-smtp-server from ${image}."
}

task dockerCreateFakeSmtpServer(dependsOn: dockerPullFakeSmtpServer, type: com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer) {
	group = "fake-smtp-server container"
	imageId = dockerPullFakeSmtpServer.getImage()
	containerName = fakeSmtpContainerName
	description = "Creates a fake-smtp-server container named " + fakeSmtpContainerName + "."
	exposePorts("tcp", [1025, 1080])
	hostConfig.portBindings = [run.environment["ANET_SMTP_PORT"] + ":" + 1025, run.environment["ANET_SMTP_HTTP_PORT"] + ":" + 1080]
}

task dockerStartFakeSmtpServer(type: com.bmuschko.gradle.docker.tasks.container.DockerStartContainer) {
	group = "fake-smtp-server container"
	description = "Starts " + fakeSmtpContainerName + " container."
	targetContainerId { fakeSmtpContainerName }
}

task dockerStopFakeSmtpServer(type: com.bmuschko.gradle.docker.tasks.container.DockerStopContainer) {
	group = "fake-smtp-server container"
	description = "Stops " + fakeSmtpContainerName + " container."
	targetContainerId { fakeSmtpContainerName }
}

task dockerRemoveFakeSmtpServer(type: com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer) {
	group = "fake-smtp-server container"
	description = "Removes " + fakeSmtpContainerName + " container."
	targetContainerId { fakeSmtpContainerName }
}

// Create the task that runs the maintenance command. Run e.g. with:
//   ./gradlew dbMaintenance -Pargs="--clearEmptyBiographies"
// To see all options, run just:
//   ./gradlew dbMaintenance
// which will print the help.
task dbMaintenance(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database maintenance command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = mainClassName
	def cmdline = ["maintenance"]
	if (project.hasProperty("args")) {
		cmdline.addAll(project.args.split("\\s+"))
	} else {
		cmdline << "--help"
	}
	cmdline << anetConfig
	args cmdline
}

task dockerPullJupyter(type: com.bmuschko.gradle.docker.tasks.image.DockerPullImage) {
	group = "jupyter container"
	image = "jupyter/scipy-notebook:5811dcb711ba" // jupyter/scipy-notebook image with python 3.6 as a base
	description = "Pulls a docker image for the python jupyter environment from ${image}."
}

task dockerCreateJupyter(dependsOn: dockerPullJupyter, type: com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer) {
	group = "jupyter container"
	imageId = dockerPullJupyter.getImage()
	containerName = jupyterContainerName
	description = "Creates an ANET jupyter_scipy container named " + jupyterContainerName + ". DB env is ${dbType}"
	hostConfig.binds = ["${projectDir}/anet-tools":"/home/jovyan/work"] + run.environment.get("DOCKER_MOUNTS", [:])
	if (isJupyterLabEnabled){
		withEnvVar('JUPYTER_ENABLE_LAB', "yes")
	}
	withEnvVar('DB_DRIVER', run.environment["DB_DRIVER"])
	withEnvVar('ANET_DB_SERVER', run.environment["ANET_DB_SERVER"])
	withEnvVar('ANET_DB_NAME', run.environment["ANET_DB_NAME"])
	withEnvVar('ANET_DB_USERNAME', run.environment["ANET_DB_USERNAME"])
	withEnvVar('ANET_DB_PASSWORD', run.environment["ANET_DB_PASSWORD"])
	withEnvVar('ANET_DB_EXPOSED_PORT', run.environment["ANET_DB_EXPOSED_PORT"])
	withEnvVar('GRANT_SUDO', "yes")
	withEnvVar('JUPYTER_TOKEN', "anet")
	withEnvVar('PYTHONPATH', "/home/jovyan/work")
	withEnvVar('LOCAL_IP', getIpAddress())
	withEnvVar('IMPORT_FRAMEWORK_VERSION', importFrameworkVersion)
	hostConfig.portBindings = [run.environment["ANET_JUPYTER_PORT"] + ":" + "8888"]
	user = "root"
	workingDir = "/home/jovyan/work"
}

task dockerStartJupyter(type: com.bmuschko.gradle.docker.tasks.container.DockerStartContainer) {
	group = "jupyter container"
	description = "Starts " + jupyterContainerName + " container."
	targetContainerId { jupyterContainerName }
}

task dockerStopJupyter(type: com.bmuschko.gradle.docker.tasks.container.DockerStopContainer) {
	group = "jupyter container"
	description = "Stops " + jupyterContainerName + " container."
	targetContainerId { jupyterContainerName }
}

task dockerRemoveJupyter(type: com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer) {
	group = "jupyter container"
	description = "Removes " + jupyterContainerName + " container."
	targetContainerId { jupyterContainerName }
}

task dockerInstallJupyterDevDependencies(type: com.bmuschko.gradle.docker.tasks.container.DockerExecContainer) {
	group = "jupyter container"
	description = "Installs Python dependencies."
	targetContainerId { jupyterContainerName }
	commands = [ ["/bin/bash", "-c", "apt update && " +
			"apt install -y gnupg gnupg2 gnupg1 && " +
			"apt install -y curl && " +
			"curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - && " +
			"curl https://packages.microsoft.com/config/ubuntu/18.04/prod.list > /etc/apt/sources.list.d/mssql-release.list && " +
			"apt update && " +
			"ACCEPT_EULA=Y apt-get install -y msodbcsql17 && " +
			"apt-get install -y dialog apt-utils && " +
			"sudo ACCEPT_EULA=Y apt-get install mssql-tools && " +
			"echo 'export PATH=\"\$PATH:/opt/mssql-tools/bin\"' >> ~/.bash_profile && " +
			"echo 'export PATH=\"\$PATH:/opt/mssql-tools/bin\"' >> ~/.bashrc && " +
			"source ~/.bashrc && " +
			"apt install -y unixodbc-dev && " +
			"apt install -y libsasl2-dev libldap2-dev libssl-dev && " +
			"pip install pipenv && " +
			"pipenv install --system --skip-lock" ] as String[] ]
}

task dockerPackJupyterEnv(dependsOn: dockerInstallJupyterDevDependencies, type: com.bmuschko.gradle.docker.tasks.container.DockerExecContainer) {
	group = "jupyter container"
	description = "Packs Jupyter Environment. Generates PEX file"
	targetContainerId { jupyterContainerName }
		commands = [ ["/bin/bash", "-c", "pip install virtualenv pipenv && " +
				"virtualenv .ve && " +
				"source .ve/bin/activate && " +
				"pipenv install --skip-lock && " +
				"pex \$(pip freeze) . -o ./pex/" + pexFilename + " --disable-cache && " +
				"deactivate &&" +
				"rm -r .ve"] as String[] ]
}

task dockerTestJupyter(dependsOn: dockerInstallJupyterDevDependencies, type: com.bmuschko.gradle.docker.tasks.container.DockerExecContainer) {
	group = "jupyter container"
	description = "Run tests inside Jupyter Environment."
	targetContainerId { jupyterContainerName }
		commands = [ ["/bin/bash", "-c", "python -m unittest discover -s /home/jovyan/work/tests/integration/"] as String[] ]
}

jar.dependsOn buildClient
run.dependsOn buildClient
build.dependsOn dockerPackJupyterEnv

//Configure the Java Checkstyle settings. Run with ./gradlew check
checkstyle {
	configFile = rootProject.file('config/google_checks.xml')
	toolVersion = '8.35'
}

spotless {
	java {
		importOrderFile 'config/google.importorder'
		eclipse().configFile 'config/eclipse-java-google-style.xml'
	}
}

//Configure extra files to include the distribution file
distributions {
	main {
		contents {
			into('docs/') {
				from('anet.yml') { rename('anet.yml', 'anet.yml.template') }
				from('anet-dictionary.yml') { rename('anet-dictionary.yml', 'anet-dictionary.yml.template') }
				from('docs/INSTALL.md')
				from('docs/TROUBLESHOOT.md')
				from('prepare-psql.sql')
				from('prepare-mssql.sql')
			}
			into('lib/') {
				from('anet-tools/pex/' + pexFilename)
			}
		}
	}
}

startScripts {
	doLast {
		unixScript.text = unixScript.text.replace('MY_APP_HOME', '\$APP_HOME')
		windowsScript.text = windowsScript.text.replace('MY_APP_HOME', '%APP_HOME%')
	}
}

node {
	nodeModulesDir = file("${project.projectDir}/client")
	version = '12.14.1'
	yarnVersion = '1.22.10'
	download = true
}

ospackage {
	release = '2'
	os = LINUX
	into '/opt'
	from(jpackageImage.outputs.files)
	from('anet.yml') {
		rename('anet.yml', 'anet.yml.template')
		into 'anet/docs'
	}
	from('docs/INSTALL.md') { into 'anet/docs' }
	from('docs/TROUBLESHOOT.md') { into 'anet/docs' }
	from('anet-dictionary.yml') {
		rename('anet-dictionary.yml', 'anet-dictionary.yml.template')
		into 'anet/docs'
	}
	from('prepare-psql.sql') {
		into 'anet/docs'
	}
	from('prepare-mssql.sql') {
		into 'anet/docs'
	}
}

task distDeb(dependsOn: "jpackageImage",type: Deb) {
	arch = 'amd64'
}

task distRpm(dependsOn: "jpackageImage",type: Rpm) {
	prefix '/opt' // Relocations: /opt
	arch = 'x86_64'
}
