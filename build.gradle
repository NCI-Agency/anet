import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

plugins {
	id "org.kordamp.gradle.markdown" version "2.2.0"
	// https://github.com/bmuschko/gradle-docker-plugin
	id "com.bmuschko.docker-remote-api" version "7.2.0"
	id "com.github.node-gradle.node" version "3.2.1"
	id "com.diffplug.spotless" version "6.3.0"
	id "com.graphql_java_generator.graphql-gradle-plugin" version "1.18"
	id "org.beryx.runtime" version "1.12.7"
	id "nebula.ospackage" version "9.1.1"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'project-report' // adds dependencyReport and htmlDependencyReport tasks

sourceCompatibility = 11
targetCompatibility = 11

boolean isTestEnv = project.hasProperty("testEnv")
String dropwizardVersion = "2.0.28"
String logbackVersion = "1.2.10"
String log4jVersion = "2.17.2"
String keycloakVersion = "16.1.1"
String containerPushDataPath = "/var/tmp"

// If defined, load alternatives for variables
if (!isTestEnv && file('localSettings.gradle').exists()) {
	apply from: 'localSettings.gradle'
} else if (isTestEnv && file('localTestSettings.gradle').exists()) {
	apply from: 'localTestSettings.gradle'
}

// Defaults for development variables
run.environment("DB_DRIVER", run.environment["DB_DRIVER"] ?: "sqlserver")
boolean isMssql = run.environment["DB_DRIVER"] == "sqlserver"
String dbType = isMssql ? "mssql" : "psql"
run.environment("ANET_DB_SERVER", run.environment["ANET_DB_SERVER"] ?: "localhost")
run.environment("ANET_DB_NAME", run.environment["ANET_DB_NAME"] ?: isTestEnv ? "testAnet" : "devAnet")
run.environment("ANET_DB_USERNAME", run.environment["ANET_DB_USERNAME"] ?: isTestEnv ? "anetTestUser" : "anetDevUser")
run.environment("ANET_DB_PASSWORD", run.environment["ANET_DB_PASSWORD"] ?: isTestEnv ? "Test-P@ssw0rd" : "Dev-P@ssw0rd")
run.environment("ANET_SA_PASSWORD", run.environment["ANET_SA_PASSWORD"] ?: "SA-P@ssw0rd")
run.environment("ANET_DB_PORT", run.environment["ANET_DB_PORT"] ?: isMssql ? "1433" : "5432")
run.environment("ANET_DB_EXPOSED_PORT", run.environment["ANET_DB_EXPOSED_PORT"] ?: isMssql ? (isTestEnv ? "1434" : "1433") : (isTestEnv ? "5433" : "5432"))
run.environment("ANET_PORT", run.environment["ANET_PORT"] ?: isTestEnv ? "8180" : "8080")
run.environment("ANET_ADMIN_PORT", run.environment["ANET_ADMIN_PORT"] ?: isTestEnv ? "8181" : "8081")
run.environment("ANET_SMTP_DISABLE", run.environment["ANET_SMTP_DISABLE"] ?: isTestEnv ? "false" : "true")
run.environment("ANET_SMTP_SERVER", run.environment["ANET_SMTP_SERVER"] ?: "localhost")
run.environment("ANET_SMTP_USERNAME", run.environment["ANET_SMTP_USERNAME"] ?: "")
run.environment("ANET_SMTP_PASSWORD", run.environment["ANET_SMTP_PASSWORD"] ?: "")
run.environment("ANET_SMTP_PORT", run.environment["ANET_SMTP_PORT"] ?: isTestEnv ? 1125 : 1025)
run.environment("ANET_SMTP_STARTTLS", run.environment["ANET_SMTP_STARTTLS"] ?: "true")
run.environment("ANET_SMTP_SSLTRUST", run.environment["ANET_SMTP_SSLTRUST"] ?: run.environment["ANET_SMTP_SERVER"])
run.environment("ANET_SMTP_HTTP_PORT", run.environment["ANET_SMTP_HTTP_PORT"] ?: isTestEnv ? 1180 : 1080)
run.environment("ANET_DICTIONARY_NAME", run.environment["ANET_DICTIONARY_NAME"] ?: "anet-dictionary.yml")

String dbContainerName = isTestEnv ? "anet-${dbType}-test-server" : "anet-${dbType}-server"
String fakeSmtpContainerName = isTestEnv ? "anet-fake-smtp-test-server" : "anet-fake-smtp-server"
String keycloakContainerName = "anet-keycloak-server"
String keycloakContainerConfigFolder = "/var/tmp"

// In this section you declare where to find the dependencies of your project
repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

// In this section you declare the dependencies for your production and test code
dependencies {
	// The production code uses the SLF4J logging API at compile time
	implementation "io.dropwizard:dropwizard-core:${dropwizardVersion}"
	implementation "io.dropwizard:dropwizard-jdbi3:${dropwizardVersion}"
	implementation "io.dropwizard:dropwizard-migrations:${dropwizardVersion}"
	implementation "io.dropwizard:dropwizard-auth:${dropwizardVersion}"
	implementation "io.dropwizard:dropwizard-views-freemarker:${dropwizardVersion}"
	implementation 'io.dropwizard-bundles:dropwizard-configurable-assets-bundle:1.3.5'

	implementation 'ru.vyarus.guicey:guicey-jdbi3:5.4.2-1'
	implementation 'com.google.guava:guava:31.1-jre' // Pick the non-Android version of Guice
	implementation 'commons-collections:commons-collections:3.2.2'

	// Supported databases:
	implementation 'com.microsoft.sqlserver:mssql-jdbc:9.4.1.jre11'
	implementation 'org.postgresql:postgresql:42.3.3' // If using postgresql
	implementation 'org.liquibase:liquibase-core:4.8.0'

	// For caching domain users (used in every request in the AuthenticationFilter)
	implementation 'org.ehcache:ehcache:3.9.9'
	implementation 'javax.cache:cache-api:1.1.1'
	implementation 'commons-beanutils:commons-beanutils:1.9.4'

	implementation 'org.simplejavamail:simple-java-mail:7.1.0'
	implementation "ch.qos.logback:logback-classic:${logbackVersion}"
	implementation "ch.qos.logback:logback-core:${logbackVersion}"
	implementation "ch.qos.logback:logback-access:${logbackVersion}"
	implementation 'com.graphql-java:java-dataloader:3.1.2'
	implementation 'io.leangen.graphql:spqr:0.11.2'
	implementation 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20211018.2'
	implementation 'com.mikesamuel:json-sanitizer:1.2.3'
	// Authentication
	implementation 'de.ahus1.keycloak.dropwizard:keycloak-dropwizard:1.2.0'
	implementation "org.keycloak:keycloak-jetty94-adapter:${keycloakVersion}"
	implementation "org.keycloak:keycloak-jaxrs-oauth-client:${keycloakVersion}"

	// Used for converting GraphQL request output to XML:
	implementation 'com.github.javadev:underscore-lodash:1.26'
	// For JSON schema validation
	implementation 'com.qindesign:snowy-json:0.16.0'

	// used for writing Excel documents
	implementation 'org.apache.poi:poi:5.2.0'
	implementation 'org.apache.poi:poi-ooxml:5.2.0'

	// For Java 9+
	runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:2.3.6'
	runtimeOnly 'javax.xml.bind:jaxb-api:2.3.1'

	// For parsing HTML to check for 'empty' input
	implementation 'org.jsoup:jsoup:1.14.3'

	// For fast and simple image scaling
	implementation 'net.coobird:thumbnailator:0.4.17'

	// The graphql-java-runtime module agregates all dependencies for the generated code,
	// including the plugin runtime
	testImplementation 'com.graphql-java-generator:graphql-java-runtime:1.18'
	// We use some extended scalars in `generateClientCodeConf` below
	testImplementation 'com.graphql-java:graphql-java-extended-scalars:16.0.1'

	testImplementation "io.dropwizard:dropwizard-testing:${dropwizardVersion}"
	testImplementation "io.dropwizard:dropwizard-client:${dropwizardVersion}"
	testImplementation 'org.apache.commons:commons-io:1.3.2'

	testImplementation 'org.assertj:assertj-core:3.22.0'

	testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
	testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
	testImplementation 'org.powermock:powermock-module-junit4-rule:2.0.9'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

	// Avoid "ERROR StatusLogger Log4j2 could not find a logging implementation.
	// Please add log4j-core to the classpath. Using SimpleLogger to log to the console..."
	implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
	implementation "org.apache.logging.log4j:log4j-to-slf4j:${log4jVersion}"
}

configurations.all {
	// Exclude transitive dependency Apache Xalan (e.g. through poi-ooxml), so we use the TransformerFactoryImpl from the JVM
	exclude module: 'xalan'
	// Also exclude XML API's to avoid (Eclipse) warnings like
	//   "The package org.w3c.dom is accessible from more than one module: <unnamed>, java.xml"
	exclude group: 'xml-apis'
}

test {
	useJUnitPlatform()
	jacoco {
		destinationFile = file("$buildDir/jacoco/test-${run.environment['DB_DRIVER']}.exec")
	}
}

jacoco {
	toolVersion = "0.8.7"
}

jacocoTestReport {
	executionData.setFrom project.fileTree(dir: "$buildDir", include: "jacoco/test-*.exec")
	reports {
		xml.required = true
		html.required = true
	}
}

//Set project version to git tag
def proc = "git describe".execute(null, projectDir);
proc.waitFor();
project.version = proc.text.trim();

runtime {
	options = ['--vm=server', '--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
	modules = [
		'java.sql',
		'java.desktop',
		'java.xml',
		'java.logging',
		'java.management',
		'jdk.unsupported',
		'java.security.jgss',
		'java.naming',
		'java.transaction.xa',
		'java.security.sasl',
		'java.instrument',
		'java.scripting',
		'java.xml.crypto'
	]

	jpackage {
	    appVersion = project.version.replace("-",".") // rpmbuild doesn't like versions with dashes
	}
}

processResources {
	filesMatching('**/version.properties') {
		filter {
			it.replace('APP_VERSION_TOKEN', project.version)
		}
	}
}
processResources.outputs.upToDateWhen{ false }

def projectBranch = "git rev-parse --abbrev-ref HEAD".execute(null, projectDir);
projectBranch.waitFor();
projectBranch = projectBranch.text.trim();

project.group = "ncia"

mainClassName = "mil.dds.anet.AnetApplication"
String anetConfig = "anet.yml"

applicationDefaultJvmArgs = ["-Djava.library.path=MY_APP_HOME/lib"]

String dbLoc = run.environment['ANET_DB_SERVER']
if (run.environment['ANET_DB_EXPOSED_PORT']) {
	dbLoc = dbLoc + ":" + run.environment['ANET_DB_EXPOSED_PORT'].toString()
}
if (!run.environment['ANET_DB_USERNAME']) {
	run.environment('ANET_DB_USERNAME', run.environment['USER'])
}

if (run.environment['DB_DRIVER'] == "sqlserver") {
	run.environment("ANET_DB_DRIVER", "com.microsoft.sqlserver.jdbc.SQLServerDriver")
	run.environment("ANET_DB_URL", "jdbc:sqlserver://${dbLoc};databaseName=${run.environment['ANET_DB_NAME']}")
} else if (run.environment['DB_DRIVER'] == "postgresql") {
	run.environment("ANET_DB_DRIVER", "org.postgresql.Driver")
	run.environment("ANET_DB_URL", "jdbc:postgresql://${dbLoc}/${run.environment['ANET_DB_NAME']}")
} else {
	throw new GradleException( "Unsupported DB_DRIVER value \'${run.environment['DB_DRIVER']}\'")
}

test.environment = run.environment

run.args = ["server", anetConfig]

task checkConfig(dependsOn: 'compileJava', type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	mainClass = mainClassName
	args = ["check", anetConfig]
}

task buildClient(dependsOn: 'yarn', type: YarnTask) {
	group = "build"
	description = "Builds the client application."
	inputs.file("client/yarn.lock").withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.dir("client/src").withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.dir("client/config").withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.dir("client/public").withPathSensitivity(PathSensitivity.RELATIVE)
	outputs.dir("$buildDir/resources/main/assets/client")
	outputs.cacheIf { true }
	environment = [ "ANET_TEST_MODE": isTestEnv ? "true" : "false" ]
	args = ['run', 'build']
}

task dbWait(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Wait for the ANET database to become available."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	mainClass = mainClassName
	args = ["waitForDB", anetConfig]
}
dbWait.mustRunAfter('dockerStartDB')

task dbInit(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database initialization command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	mainClass = mainClassName
	args = ["init", anetConfig]
	standardInput = System.in
}

task dbStatus(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database status (Liquibase) command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	mainClass = mainClassName
	args = ["db", "status", anetConfig]
}

task dbPrep(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database preparation command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	mainClass = mainClassName
	args = ["dbScript", "-S", "prepare-${dbType}.sql", anetConfig]
}
dbPrep.mustRunAfter('dbWait')

task dbMigrate(dependsOn: dbPrep, type: JavaExec) {
	group = "database"
	description = "Runs the ANET database migration (Liquibase) command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	mainClass = mainClassName
	args = ["db", "migrate", anetConfig]
	if (project.hasProperty("dry-run")) {
		args += "--dry-run"
	}
}
dbMigrate.mustRunAfter('dbDrop')

task dbTest(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database migration test (Liquibase) command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	mainClass = mainClassName
	args = ["db", "test", anetConfig]
}
dbTest.mustRunAfter('dbWait')

task dbRollback(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database migration rollback (Liquibase) command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	mainClass = mainClassName
	args = ["db", "rollback", anetConfig, "--count", "1"]
	if (project.hasProperty("dry-run")) {
		args += "--dry-run"
	}
}
dbRollback.mustRunAfter('dbWait')

task dbDrop(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database drop-all (Liquibase) command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	mainClass = mainClassName
	args = ["db", "drop-all", "--confirm-delete-everything", anetConfig]
}
dbDrop.mustRunAfter('dbWait')

task dbLoad(dependsOn: "dbLoad_${dbType}") {
	group = "database"
	description = "Runs the ANET database load command; loads demo data."
}
dbLoad.mustRunAfter('dbMigrate')

task dbLoad_mssql(dependsOn: ['compileJava'], type: JavaExec) {
	group = "database"
	description = "Runs the ANET database load command for MS SQL; loads demo data."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	mainClass = mainClassName
	args = ["dbScript", "-S", "insertBaseData-mssql.sql", anetConfig]
}

task dbLoad_psql_createData(type: Exec) {
	group = "database"
	description = "Convert the ANET demo data from MS SQL to PostgreSQL format."
	standardInput = new FileInputStream("${projectDir}/insertBaseData-mssql.sql")
	standardOutput = new FileOutputStream("${projectDir}/insertBaseData-psql.sql")
	commandLine "${projectDir}/mssql2pg.pl"
}

task pushPsqlBaseData(dependsOn: dbLoad_psql_createData, type: DockerCopyFileToContainer) {
	containerId = dbContainerName
	description = "Push SQL base data to PostgreSQL"
	hostPath = "${projectDir}/insertBaseData-psql.sql"
	remotePath = containerPushDataPath
}

task dbLoad_psql(dependsOn: pushPsqlBaseData, type: DockerExecContainer) {
	group = "database"
	description = "Runs the ANET database load command for PostgreSQL; loads demo data."
	containerId = dbContainerName
	commands = [ ["psql", "-U", run.environment["ANET_DB_USERNAME"], "-d", run.environment["ANET_DB_NAME"], "-f", "${containerPushDataPath}/insertBaseData-psql.sql"] as String[] ]
}

task dockerBuildImage(dependsOn: installDist, type: DockerBuildImage) {
	description = "Builds anet-app-server container image."
	doFirst {
		copy {
			from 'docker/anet-app-server/Dockerfile'
			into 'build/install'
		}
	}
	inputDir =  project.file('build/install')
	def resultTags = ["ncia/anet-app-server:${project.version}"]
	if (projectBranch=="main")
		resultTags << 'ncia/anet-app-server:latest'
	images = resultTags
}

task dockerPushLatestImage(type: DockerPushImage) {
	images = ['ncia/anet-app-server:latest']
}

task dockerPushImage(type: DockerPushImage) {
	images = ["ncia/anet-app-server:${project.version}"]
}

// Database containers (Microsoft SQL Server and PostgreSQL)

task dockerPullDB(type: DockerPullImage) {
	group = "database container"
	image = isMssql ? "ncia/anet-mssql-linux:latest" : "postgres:latest"
	description = "Pulls a docker image for the ANET DB from ${image}."
}

task dockerCreateDB(dependsOn: dockerPullDB, type: DockerCreateContainer) {
	group = "database container"
	imageId = dockerPullDB.getImage()
	containerName = dbContainerName
	description = "Creates an ANET ${dbType} SQL DB container named ${dbContainerName}."
	hostConfig.shmSize = 1024*1024*1024L
	hostConfig.binds = ["${projectDir}":"/hostdata"] + run.environment.get("DOCKER_MOUNTS", [:])
	if (isMssql) {
	  withEnvVar('ACCEPT_EULA', 'Y')
	  withEnvVar('SA_PASSWORD', run.environment["ANET_SA_PASSWORD"])
	  withEnvVar('DB_NAME', run.environment["ANET_DB_NAME"])
	  withEnvVar('DB_USER', run.environment["ANET_DB_USERNAME"])
	  withEnvVar('DB_USER_PASSWORD', run.environment["ANET_DB_PASSWORD"])
	} else {
	  withEnvVar('POSTGRES_DB', run.environment["ANET_DB_NAME"])
	  withEnvVar('POSTGRES_USER', run.environment["ANET_DB_USERNAME"])
	  withEnvVar('POSTGRES_PASSWORD', run.environment["ANET_DB_PASSWORD"])
	}
	hostConfig.portBindings = ["${run.environment["ANET_DB_EXPOSED_PORT"]}:${run.environment["ANET_DB_PORT"]}"]
}

// need to make this invoke dockerCreateDB if there is no anet-${dbType}-server and possibly get newer image if available
task dockerStartDB(type: DockerStartContainer) {
	group = "database container"
	description = "Starts ${dbContainerName} container."
	targetContainerId { dbContainerName }
}
dockerStartDB.mustRunAfter('dockerCreateDB')

task dockerStopDB(type: DockerStopContainer) {
	group = "database container"
	description = "Stops ${dbContainerName} container."
	targetContainerId { dbContainerName }
}

task dockerRemoveDB(type: DockerRemoveContainer) {
	group = "database container"
	description = "Removes ${dbContainerName} container."
	targetContainerId { dbContainerName }
}
dockerRemoveDB.mustRunAfter('dockerStopDB')

// Keycloak container

task dockerPullKeycloak(type: DockerPullImage) {
	group = "keycloak container"
	image = "jboss/keycloak:${keycloakVersion}"
	description = "Pulls a docker image for keycloak from ${image}."
}

task dockerCreateKeycloak(dependsOn: dockerPullKeycloak, type: DockerCreateContainer) {
	group = "keycloak container"
	imageId = dockerPullKeycloak.getImage()
	containerName = keycloakContainerName
	description = "Creates a keycloak container named ${keycloakContainerName}."
	hostConfig.portBindings = ["9080:8080", "9443:8443"]
	hostConfig.binds = run.environment.get("DOCKER_MOUNTS", [:])
	withEnvVar("KEYCLOAK_USER", "admin")
	withEnvVar("KEYCLOAK_PASSWORD", "admin")
	withEnvVar("KEYCLOAK_IMPORT", "$containerPushDataPath/ANET-Realm-export.json")
}

task dockerConfigureKeycloak(dependsOn: dockerCreateKeycloak, type: DockerCopyFileToContainer) {
	description = "Push REALM configuration to Keycloak"
	containerId = keycloakContainerName
	hostPath = "${rootProject.projectDir}/ANET-Realm-export.json"
	remotePath = containerPushDataPath
}

task dockerStartKeycloak(type: DockerStartContainer) {
	group = "keycloak container"
	description = "Starts ${keycloakContainerName} container."
	containerId = keycloakContainerName
}

task dockerCopyKeycloakExportCommand(type: DockerCopyFileToContainer) {
	description = "Copy REALM export command to Keycloak"
	containerId = keycloakContainerName
	hostPath = "${rootProject.projectDir}/export-anet-realm.sh"
	remotePath = containerPushDataPath
}

task dockerExportKeycloakRealm(dependsOn: dockerCopyKeycloakExportCommand, type: DockerExecContainer) {
	group = "keycloak container"
	description = "Epxorts ANET-Realm from ${keycloakContainerName} container."
	containerId = keycloakContainerName
	commands = [ ["/bin/bash", "${containerPushDataPath}/export-anet-realm.sh", "100", "ANET-Realm", "${containerPushDataPath}/ANET-Realm-export.json"] as String[] ]
}

task dockerGetKeycloakConfiguration(dependsOn: dockerExportKeycloakRealm, type: DockerCopyFileFromContainer) {
	description = "Pull REALM configuration from Keycloak"
	containerId = keycloakContainerName
	hostPath = "${rootProject.projectDir}"
	remotePath = "${containerPushDataPath}/ANET-Realm-export.json"
}

task dockerStopKeycloak(type: DockerStopContainer) {
	group = "keycloak container"
	description = "Stops ${keycloakContainerName} container."
	containerId = keycloakContainerName
}

task dockerRemoveKeycloak(type: DockerRemoveContainer) {
	group = "keycloak container"
	description = "Removes ${keycloakContainerName} container."
	containerId = keycloakContainerName
}
dockerRemoveKeycloak.mustRunAfter('dockerStopKeycloak')

// Fake SMTP server container

task dockerPullFakeSmtpServer(type: DockerPullImage) {
	group = "fake-smtp-server container"
	image = "devoto13/fake-smtp-server:0.1.0" // No 'latest' available yet
	description = "Pulls a docker image for the fake-smtp-server from ${image}."
}

task dockerCreateFakeSmtpServer(dependsOn: dockerPullFakeSmtpServer, type: DockerCreateContainer) {
	group = "fake-smtp-server container"
	imageId = dockerPullFakeSmtpServer.getImage()
	containerName = fakeSmtpContainerName
	description = "Creates a fake-smtp-server container named ${fakeSmtpContainerName}."
	exposePorts("tcp", [1025, 1080])
	hostConfig.portBindings = ["${run.environment["ANET_SMTP_PORT"]}:1025", "${run.environment["ANET_SMTP_HTTP_PORT"]}:1080"]
}

task dockerStartFakeSmtpServer(type: DockerStartContainer) {
	group = "fake-smtp-server container"
	description = "Starts ${fakeSmtpContainerName} container."
	containerId = fakeSmtpContainerName
}

task dockerStopFakeSmtpServer(type: DockerStopContainer) {
	group = "fake-smtp-server container"
	description = "Stops ${fakeSmtpContainerName} container."
	containerId = fakeSmtpContainerName
}

task dockerRemoveFakeSmtpServer(type: DockerRemoveContainer) {
	group = "fake-smtp-server container"
	description = "Removes ${fakeSmtpContainerName} container."
	containerId = fakeSmtpContainerName
}
dockerRemoveFakeSmtpServer.mustRunAfter('dockerStopFakeSmtpServer')

// Create the task that runs the maintenance command. Run e.g. with:
//   ./gradlew dbMaintenance -Pargs="--clearEmptyBiographies"
// To see all options, run just:
//   ./gradlew dbMaintenance
// which will print the help.
task dbMaintenance(dependsOn: 'compileJava', type: JavaExec) {
	group = "database"
	description = "Runs the ANET database maintenance command."
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	mainClass = mainClassName
	def cmdline = ["maintenance"]
	if (project.hasProperty("args")) {
		cmdline.addAll(project.args.split("\\s+"))
	} else {
		cmdline << "--help"
	}
	cmdline << anetConfig
	args cmdline
}

// Execute the GraphQL plugin before Java compile, so that all test (re)sources are generated on time
compileTestJava.dependsOn generateClientCode
processTestResources.dependsOn generateClientCode

// Add the generated (re)sources as a Java test (re)source folder
sourceSets.test.java.srcDirs += 'build/generated/sources/graphqlGradlePlugin'
sourceSets.test.resources.srcDirs += 'build/generated/resources/graphqlGradlePlugin'
// and ignore optional problems in Eclipse
eclipse.classpath.file {
	whenMerged { classpath ->
		classpath.entries.each { entry ->
			if (entry.path.contains('graphqlGradlePlugin')) {
				entry.entryAttributes['ignore_optional_problems'] = true
			}
		}
	}
}

// And remove the auto-added generated (re)sources from the main Java (re)source
task prepareCompileJava(dependsOn: 'generateClientCode') {
	doFirst {
		logger.info("De-registering generated folders for task prepareCompileJava")
		def mainJavaSrcDirs = sourceSets.main.java.srcDirs.toList()
		mainJavaSrcDirs.removeAll { it.name == 'graphqlGradlePlugin' }
		sourceSets.main.java.srcDirs = mainJavaSrcDirs
	}
}
compileJava.dependsOn prepareCompileJava
task prepareProcessResources(dependsOn: 'generateClientCode') {
	doFirst {
		logger.info("De-registering generated folders for task prepareProcessResources")
		def mainResourceSrcDirs = sourceSets.main.resources.srcDirs.toList()
		mainResourceSrcDirs.removeAll { it.name == 'graphqlGradlePlugin' }
		sourceSets.main.resources.srcDirs = mainResourceSrcDirs
	}
}
processResources.dependsOn('prepareProcessResources', 'buildClient')

// Configure the GraphQL Gradle Plugin; all available parameters are described here:
// https://graphql-maven-plugin-project.graphql-java-generator.com/graphql-maven-plugin/generateClientCode-mojo.html
generateClientCodeConf {
	schemaFileFolder = 'src/test/resources/'
	schemaFilePattern = 'anet.graphql'
	packageName = 'mil.dds.anet.test.client'
	// Set recommended parameters to respect the future 2.x behavior
	separateUtilityClasses = true
	copyRuntimeSources = false
	generateDeprecatedRequestResponse = false
	skipGenerationIfSchemaHasNotChanged = true
	customScalars = [
		[
			graphQLTypeName: "Instant",
			javaType: "java.time.Instant",
			graphQLScalarTypeStaticField: "mil.dds.anet.graphql.DateTimeMapper.GraphQLInstant"
		],
		[
			graphQLTypeName: "Long",
			javaType: "java.lang.Long",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.GraphQLLong"
		],
		[
			graphQLTypeName: "Map_String_ObjectScalar",
			javaType: "java.util.HashMap",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.Object"
		],
		[
			graphQLTypeName: "UNREPRESENTABLE",
			javaType: "java.lang.Object",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.Object"
		]
	]
}

jar.dependsOn buildClient
run.dependsOn buildClient

run.mustRunAfter('dbLoad', 'dockerStartKeycloak')
test.mustRunAfter('dbLoad', 'dockerStartKeycloak', 'dockerStartFakeSmtpServer')

jar {
	// Add classpath to manifest to prevent variables in startScripts getting too long
	manifest {
		attributes "Class-Path": configurations.runtimeClasspath.files*.name.join(" ")
	}
}

//Configure the Java Checkstyle settings. Run with ./gradlew check
checkstyle {
	configFile = rootProject.file('config/google_checks.xml')
	toolVersion = '8.35'
}
//Easiest way to avoid checking generated code
checkstyleTest {
	source = fileTree('src/test/java')
}

spotless {
	java {
		importOrderFile 'config/google.importorder'
		eclipse().configFile('config/eclipse-java-google-style.xml')
		//Exclude generated code
		targetExclude 'build/generated/**'
	}
}

//Configure extra files to include the distribution file
distributions {
	main {
		contents {
			into('docs/') {
				from('anet.yml') { rename('anet.yml', 'anet.yml.template') }
				from('anet-dictionary.yml') { rename('anet-dictionary.yml', 'anet-dictionary.yml.template') }
				from(markdownToHtml)
				from('prepare-psql.sql')
				from('prepare-mssql.sql')
			}
		}
	}
}

startScripts {
	// Clear up the classpath because the jar has it in its manifest
	classpath = jar.outputs.files
	doLast {
		unixScript.text = unixScript.text.replace('MY_APP_HOME', '\$APP_HOME')
		windowsScript.text = windowsScript.text.replace('MY_APP_HOME', '%APP_HOME%')
	}
}

//Configure Markdown plugin
allprojects {
	markdownToHtml.sourceDir = file("docs")
	markdownToHtml.outputDir = file("$buildDir/documentation")
	markdownToHtml.hardwraps = true
}

node {
	nodeProjectDir = file("${project.projectDir}/client")
	version = '14.18.1'
	yarnVersion = '1.22.15'
	download = true
}

ospackage {
	release = '2'
	os = LINUX
	into '/opt'
	from(jpackageImage.outputs.files)
	into('anet/docs/') {
		from('anet.yml') { rename('anet.yml', 'anet.yml.template') }
		from('anet-dictionary.yml') { rename('anet-dictionary.yml', 'anet-dictionary.yml.template') }
		from(markdownToHtml)
		from('prepare-psql.sql')
		from('prepare-mssql.sql')
	}
}

task distDeb(dependsOn: "jpackageImage", type: Deb) {
	arch = 'amd64'
}

task distRpm(dependsOn: "jpackageImage", type: Rpm) {
	prefix '/opt' // Relocations: /opt
	arch = 'x86_64'
}
