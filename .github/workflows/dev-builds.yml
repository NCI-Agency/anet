name: ANET Dev Builds

on:
  pull_request:
    branches:
    - candidate

jobs:
  build:
    name: Build with Gradle
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max-old-space-size=8192'

    steps:
    - name: Notify slack start
      id: slack
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: anet-notifications
        status: STARTED
        color: warning
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - run: echo "CHROMEDRIVER_FILEPATH=$CHROMEWEBDRIVER/chromedriver" >> $GITHUB_ENV
    - name: cache gradle
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: cache node
      uses: actions/cache@v2
      with:
        path: ./client/node_modules/.cache
        key: ${{ runner.os }}-node
        restore-keys: |
          ${{ runner.os }}-node
    - run: ./gradlew yarnSetup
    - name: get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(./gradlew -q yarn_cache_dir)"
    - name: cache yarn
      uses: actions/cache@v2
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('client/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Notify slack success
      if: success()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        message_id: ${{ steps.slack.outputs.message_id }}
        channel: anet-notifications
        status: SUCCEEDED
        color: good
    - name: Notify slack failure
      if: failure()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        message_id: ${{ steps.slack.outputs.message_id }}
        channel: anet-notifications
        status: FAILED
        color: danger

  test:
    needs: build
    name: Test with ${{ matrix.database.DB_DRIVER }} and ${{ matrix.dictionary.DICTIONARY_NAME }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        database:
        - DB_DRIVER: postgresql
        dictionary:
        - DICTIONARY_NAME: anet-dictionary.yml
        - DICTIONARY_NAME: testDictionaries/no-custom-fields.yml
    env:
      NODE_OPTIONS: '--max-old-space-size=8192'
      DB_DRIVER: ${{ matrix.database.DB_DRIVER }}
      ANET_DICTIONARY_NAME: ${{ matrix.dictionary.DICTIONARY_NAME }}

    steps:
    - name: Notify slack start
      id: slack
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: anet-notifications
        status: STARTED
        color: warning
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: cache gradle
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: cache node
      uses: actions/cache@v2
      with:
        path: ./client/node_modules/.cache
        key: ${{ runner.os }}-node
        restore-keys: |
          ${{ runner.os }}-node
    - run: ./gradlew yarnSetup
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(./gradlew -q yarn_cache_dir)"
    - name: cache yarn
      uses: actions/cache@v2
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('client/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - run: ./gradlew -PtestEnv dockerCreateDB dockerStartDB
    - run: ./gradlew -PtestEnv dbWait dbMigrate dbLoad
    - run: |
        ./gradlew -PtestEnv run &
        sleep 15
    # check if build process stdout and stderr outputs have 'error:'
    - run: |
        ./gradlew yarn_run_start --console=plain &> dev_error.log &
        sleep 30
        ! grep -i -C 2 "error:" dev_error.log
    - run: |
        ./gradlew yarn_run_storybook --console=plain &> storybook_error.log &
        sleep 60
        ! grep -i -C 2 "error:" storybook_error.log
    - name: Notify slack success
      if: success()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        message_id: ${{ steps.slack.outputs.message_id }}
        channel: anet-notifications
        status: SUCCEEDED
        color: good
    - name: Notify slack failure
      if: failure()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        message_id: ${{ steps.slack.outputs.message_id }}
        channel: anet-notifications
        status: FAILED
        color: danger
