#!/bin/bash

DEFAULT_DOC_VERSION="01"
DEFAULT_CLASSIFICATION="Public"
DEFAULT_VERSION_DATE="$(date +'%d %b %Y')"
DEFAULT_CREATOR="$(git config --get user.name)"
DEFAULT_TITLE="Release Notes"

usage() {
  cat <<_EOF_ 1>&2
Usage: $0 -p PRODUCT_VERSION -a AUTHOR [ -d DOC_VERSION ] [ -l CLASSIFICATION ] [ -v VERSION_DATE ] [ -c CREATOR ] [ -t TITLE ] [ -D ]
Defaults:
  DOC_VERSION: "${DEFAULT_DOC_VERSION}"
  CLASSIFICATION: "${DEFAULT_CLASSIFICATION}"
  VERSION_DATE: "${DEFAULT_VERSION_DATE}"
  CREATOR: "${DEFAULT_CREATOR}"
  TITLE: "${DEFAULT_TITLE}"
_EOF_
  exit 1
}

PRODUCT_VERSION=""
AUTHOR=""
DOC_VERSION="${DEFAULT_DOC_VERSION}"
CLASSIFICATION="${DEFAULT_CLASSIFICATION}"
VERSION_DATE="${DEFAULT_VERSION_DATE}"
CREATOR="${DEFAULT_CREATOR}"
TITLE="${DEFAULT_TITLE}"
SHOW_DETAILS=""

while getopts ":p:a:d:l:v:c:t:D" options
do
  case "${options}" in
    p)
      PRODUCT_VERSION=${OPTARG}
      ;;
    a)
      AUTHOR=${OPTARG}
      ;;
    d)
      DOC_VERSION=${OPTARG}
      ;;
    l)
      CLASSIFICATION=${OPTARG}
      ;;
    v)
      VERSION_DATE=${OPTARG}
      ;;
    c)
      CREATOR=${OPTARG}
      ;;
    t)
      TITLE=${OPTARG}
      ;;
    D)
      SHOW_DETAILS="-D_"
      ;;
    :)
      echo "Error: -${OPTARG} requires an argument." 1>&2
      usage
      ;;
    *)
      usage
      ;;
  esac
done

if [ -z "${PRODUCT_VERSION}" ]
then
  echo "Missing PRODUCT_VERSION"
  usage
fi

if [ -z "${AUTHOR}" ]
then
  echo "Missing AUTHOR"
  usage
fi

DOC_DIR="doc"
# Template resides in DOC_DIR
TEMPLATE="ncia-template.latex"
# Image path relative to template location
PRODUCT_LOGO="../src/main/resources/assets/img/anet.svg"

# For storing intermediate files
TMP_DIR="tmp"
IMAGE_DOWNLOADS="${TMP_DIR}/images"

# The generated MarkDown as input
INPUT_MD="${TMP_DIR}/release-${PRODUCT_VERSION}.md"
# The generated LaTeX as output
OUTPUT_LATEX="$(basename "${INPUT_MD}" .md)-${DOC_VERSION}.latex"
# The generated PDF as output
OUTPUT_PDF="$(basename "${OUTPUT_LATEX}" .latex).pdf"

cd "${DOC_DIR}"
mkdir -p "${TMP_DIR}"

# Get the release notes
(
  cd .. && \
  ./gradlew \
    -q \
    yarn_-s_--no-progress_run_-s_generate-release-documentation_"${SHOW_DETAILS}${PRODUCT_VERSION}" \
  | dos2unix \
) > "${INPUT_MD}"

# Clean up some useless sections
perl \
  -p0i \
  -e 's, Age \| Adoption \| Passing \| Confidence \|$,,gm;' \
  -e 's,---\|---\|---\|---\|$,,gm;' \
  -e 's, \[\!\[age\]\(.*/merge-confidence/\) \|$,,gm;' \
  -e 's|^---\n\n### Release Notes\n\n<details>\n.*?\n</details>$||gms;' \
  -e 's|^---\n\n### Configuration\n.*?\nThis PR has been generated by \[WhiteSource Renovate\].*?$||gms;' \
  -e 's|^### GitHub Vulnerability Alerts\n.*\n- Read \[more details\].*?$||gms;' \
  -e 's|^\[!\[Dependabot compatibility score\].*?\n---$||gms;' \
  -e 's|^<details>\n<summary>.*?\n</details>$||gms;' \
  "${INPUT_MD}"

# Convert to LaTeX
pandoc \
  -t latex \
  --listings \
  --template="${TEMPLATE}" \
  -V title="${TITLE}" \
  -V author="${AUTHOR}" \
  -V productLogo="${PRODUCT_LOGO}" \
  -V productVersion="${PRODUCT_VERSION}" \
  -V docVersion="${DOC_VERSION}" \
  -V classification="${CLASSIFICATION}" \
  -V versionHistory="${VERSION_DATE} & ${PRODUCT_VERSION}-${DOC_VERSION} & ${CREATOR} & Auto-generated document in LaTeX \\\\" \
  -o "${OUTPUT_LATEX}" \
  "${INPUT_MD}"

# Clean up some image references
perl \
  -pi \
  -e 's|\\href{https://renovatebot.com}{\\includegraphics{https://app.renovatebot.com/images/banner.svg}}||;' \
  -e 's|\\href{https://docs.renovatebot.com/merge-confidence/}{\\includegraphics{[^}]*}}||;' \
  -e 's|\\href{https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates\\#about-compatibility-scores}{\\includegraphics{[^}]*}}||;' \
  -e 's|\\includegraphics{([^}]*/([^/}]*))}|\n\\IfFileExists{$2}{}{\\immediate\\write18{wget -cNP '"${IMAGE_DOWNLOADS}"' $1}}\\includegraphics[width=\\textwidth]{'"${IMAGE_DOWNLOADS}"'/$2}|;' \
  "${OUTPUT_LATEX}"

# Convert to PDF using latexmk and xelatex
latexmk \
  -f \
  -output-directory="${TMP_DIR}" \
  -pdflua \
  -pdflualatex=" \
    lualatex \
      --interaction=nonstopmode \
      --enable-write18 \
      --shell-escape \
      --cnf-line=stack_size=10000 \
      %O \
      %S \
  " \
"${OUTPUT_LATEX}" && \
mv "${TMP_DIR}/${OUTPUT_PDF}" .
