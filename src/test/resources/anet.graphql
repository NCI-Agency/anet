""""""
type AccessToken {
  createdAt: Instant
  description: String
  expiresAt: Instant
  name: String
  scope: TokenScope
  tokenHash: String
  uuid: String
}

""""""
input AccessTokenInput {
  createdAt: Instant
  description: String
  expiresAt: Instant
  name: String
  scope: TokenScope
  tokenHash: String
  uuid: String
}

""""""
enum ActionType {
  APPROVE
  PUBLISH
  REJECT
  SUBMIT
  UNPUBLISH
}

""""""
type Activity {
  ip: String
  request: String
  time: Instant
}

""""""
type AdminSetting {
  createdAt: Instant
  key: String
  updatedAt: Instant
  value: String
}

""""""
input AdminSettingInput {
  createdAt: Instant
  key: String
  updatedAt: Instant
  value: String
}

""""""
type AdvisorReportsEntry {
  name: String
  stats: [AdvisorReportsStats]
  uuid: String
}

""""""
type AdvisorReportsStats {
  nrEngagementsAttended: Int!
  nrReportsSubmitted: Int!
  week: Int!
}

""""""
enum AggregationPeriod {
  DAY
  MONTH
  WEEK
}

""""""
enum AggregationType {
  BY_OBJECT
  OVER_TIME
}

""""""
type AnetBeanList_AnetEmail {
  list: [AnetEmail]
  pageNum: Int
  pageSize: Int
  totalCount: Int
}

""""""
type AnetBeanList_Attachment {
  list: [Attachment]
  pageNum: Int
  pageSize: Int
  totalCount: Int
}

""""""
type AnetBeanList_AuthorizationGroup {
  list: [AuthorizationGroup]
  pageNum: Int
  pageSize: Int
  totalCount: Int
}

""""""
type AnetBeanList_Event {
  list: [Event]
  pageNum: Int
  pageSize: Int
  totalCount: Int
}

""""""
type AnetBeanList_EventSeries {
  list: [EventSeries]
  pageNum: Int
  pageSize: Int
  totalCount: Int
}

""""""
type AnetBeanList_Location {
  list: [Location]
  pageNum: Int
  pageSize: Int
  totalCount: Int
}

""""""
type AnetBeanList_MartImportedReport {
  list: [MartImportedReport]
  pageNum: Int
  pageSize: Int
  totalCount: Int
}

""""""
type AnetBeanList_Organization {
  list: [Organization]
  pageNum: Int
  pageSize: Int
  totalCount: Int
}

""""""
type AnetBeanList_Person {
  list: [Person]
  pageNum: Int
  pageSize: Int
  totalCount: Int
}

""""""
type AnetBeanList_Position {
  list: [Position]
  pageNum: Int
  pageSize: Int
  totalCount: Int
}

""""""
type AnetBeanList_Report {
  list: [Report]
  pageNum: Int
  pageSize: Int
  totalCount: Int
}

""""""
type AnetBeanList_Subscription {
  list: [Subscription]
  pageNum: Int
  pageSize: Int
  totalCount: Int
}

""""""
type AnetBeanList_SubscriptionUpdate {
  list: [SubscriptionUpdate]
  pageNum: Int
  pageSize: Int
  totalCount: Int
}

""""""
type AnetBeanList_Task {
  list: [Task]
  pageNum: Int
  pageSize: Int
  totalCount: Int
}

""""""
type AnetBeanList_UserActivity {
  list: [UserActivity]
  pageNum: Int
  pageSize: Int
  totalCount: Int
}

""""""
type AnetEmail {
  comment: String
  createdAt: Instant
  errorMessage: String
  id: Int
  toAddresses: [String]
  type: String
}

""""""
input AnetEmailInput {
  comment: String
  createdAt: Instant
  toAddresses: [String]
}

""""""
type ApprovalStep {
  approvers: [Position]
  createdAt: Instant
  name: String
  nextStepUuid: String
  relatedObjectUuid: String
  restrictedApproval: Boolean!
  type: ApprovalStepType
  updatedAt: Instant
  uuid: String
}

""""""
input ApprovalStepInput {
  approvers: [PositionInput]
  createdAt: Instant
  name: String
  nextStepUuid: String
  relatedObjectUuid: String
  restrictedApproval: Boolean
  type: ApprovalStepType
  updatedAt: Instant
  uuid: String
}

""""""
enum ApprovalStepType {
  PLANNING_APPROVAL
  REPORT_APPROVAL
}

""""""
type Assessment {
  assessmentKey: String
  assessmentRelatedObjects: [GenericRelatedObject]
  assessmentValues: String
  author: Person
  createdAt: Instant
  updatedAt: Instant
  uuid: String
}

""""""
input AssessmentInput {
  assessmentKey: String
  assessmentRelatedObjects: [GenericRelatedObjectInput]
  assessmentValues: String
  author: PersonInput
  createdAt: Instant
  updatedAt: Instant
  uuid: String
}

""""""
input AssessmentSearchQueryInput {
  filters: Map_String_ObjectScalar
  key: String
}

""""""
enum Atmosphere {
  NEGATIVE
  NEUTRAL
  POSITIVE
}

""""""
type Attachment {
  attachmentRelatedObjects: [GenericRelatedObject]
  author: Person
  caption: String
  classification: String
  contentLength: Long
  createdAt: Instant
  description: String
  fileName: String
  mimeType: String
  updatedAt: Instant
  uuid: String
}

""""""
input AttachmentInput {
  attachmentRelatedObjects: [GenericRelatedObjectInput]
  author: PersonInput
  caption: String
  classification: String
  contentLength: Long
  createdAt: Instant
  description: String
  fileName: String
  mimeType: String
  updatedAt: Instant
  uuid: String
}

""""""
input AttachmentSearchQueryInput {
  authorUuid: String
  classification: String
  emailNetwork: String
  inMyReports: Boolean
  mimeType: String
  pageNum: Int
  pageSize: Int
  sortBy: AttachmentSearchSortBy
  sortOrder: SortOrder
  status: Status
  subscribed: Boolean
  text: String
}

""""""
enum AttachmentSearchSortBy {
  CREATED_AT
}

""""""
type AuthorizationGroup {
  administrativePositions: [Position]
  authorizationGroupRelatedObjects: [GenericRelatedObject]
  createdAt: Instant
  description: String
  distributionList: Boolean
  forSensitiveInformation: Boolean
  isSubscribed: Boolean
  name: String
  status: Status
  updatedAt: Instant
  uuid: String
}

""""""
input AuthorizationGroupInput {
  administrativePositions: [PositionInput]
  authorizationGroupRelatedObjects: [GenericRelatedObjectInput]
  createdAt: Instant
  description: String
  distributionList: Boolean
  forSensitiveInformation: Boolean
  name: String
  status: Status
  updatedAt: Instant
  uuid: String
}

""""""
input AuthorizationGroupSearchQueryInput {
  distributionList: Boolean
  emailNetwork: String
  forSensitiveInformation: Boolean
  inMyReports: Boolean
  pageNum: Int
  pageSize: Int
  sortBy: AuthorizationGroupSearchSortBy
  sortOrder: SortOrder
  status: Status
  subscribed: Boolean
  text: String
}

""""""
enum AuthorizationGroupSearchSortBy {
  CREATED_AT
  NAME
  RECENT
}

""""""
type Comment {
  author: Person
  createdAt: Instant
  reportUuid: String
  text: String
  updatedAt: Instant
  uuid: String
}

""""""
input CommentInput {
  author: PersonInput
  createdAt: Instant
  reportUuid: String
  text: String
  updatedAt: Instant
  uuid: String
}

""""""
type CustomSensitiveInformation {
  createdAt: Instant
  customFieldName: String
  customFieldValue: String
  relatedObject: RelatableObject
  relatedObjectType: String
  relatedObjectUuid: String
  updatedAt: Instant
  uuid: String
}

""""""
input CustomSensitiveInformationInput {
  createdAt: Instant
  customFieldName: String
  customFieldValue: String
  relatedObjectType: String
  relatedObjectUuid: String
  updatedAt: Instant
  uuid: String
}

""""""
type EmailAddress {
  address: String
  network: String
}

""""""
input EmailAddressInput {
  address: String
  network: String
}

""""""
enum EngagementStatus {
  CANCELLED
  FUTURE
  HAPPENED
}

""""""
type EntityAvatar {
  applyCrop: Boolean!
  attachmentUuid: String
  cropHeight: Int
  cropLeft: Int
  cropTop: Int
  cropWidth: Int
  relatedObjectType: String
  relatedObjectUuid: String
}

""""""
input EntityAvatarInput {
  applyCrop: Boolean!
  attachmentUuid: String
  cropHeight: Int
  cropLeft: Int
  cropTop: Int
  cropWidth: Int
  relatedObjectType: String
  relatedObjectUuid: String
}

""""""
type Event {
  adminOrg: Organization
  assessments: [Assessment]
  attachments: [Attachment]
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformation]
  description: String
  endDate: Instant
  entityAvatar: EntityAvatar
  eventSeries: EventSeries
  hostOrg: Organization
  isSubscribed: Boolean
  location: Location
  name: String
  notes: [Note]
  organizations: [Organization]
  outcomes: String
  ownerOrg: Organization
  people: [Person]
  reports(query: ReportSearchQueryInput): [Report]
  startDate: Instant
  status: Status
  tasks: [Task]
  type: EventType
  updatedAt: Instant
  uuid: String
}

""""""
input EventInput {
  adminOrg: OrganizationInput
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformationInput]
  description: String
  endDate: Instant
  entityAvatar: EntityAvatarInput
  eventSeries: EventSeriesInput
  hostOrg: OrganizationInput
  location: LocationInput
  name: String
  organizations: [OrganizationInput]
  outcomes: String
  ownerOrg: OrganizationInput
  people: [PersonInput]
  startDate: Instant
  status: Status
  tasks: [TaskInput]
  type: EventType
  updatedAt: Instant
  uuid: String
}

""""""
input EventSearchQueryInput {
  adminOrgUuid: [String]
  anyOrgUuid: [String]
  emailNetwork: String
  endDate: Instant
  eventSeriesUuid: String
  eventTaskUuid: [String]
  hostOrgUuid: [String]
  inMyReports: Boolean
  includeDate: Instant
  locationUuid: [String]
  ownerOrgUuid: [String]
  pageNum: Int
  pageSize: Int
  sortBy: EventSeriesSearchSortBy
  sortOrder: SortOrder
  startDate: Instant
  status: Status
  subscribed: Boolean
  taskUuid: [String]
  text: String
  type: String
}

""""""
type EventSeries {
  adminOrg: Organization
  assessments: [Assessment]
  attachments: [Attachment]
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformation]
  description: String
  entityAvatar: EntityAvatar
  hostOrg: Organization
  isSubscribed: Boolean
  name: String
  notes: [Note]
  ownerOrg: Organization
  status: Status
  updatedAt: Instant
  uuid: String
}

""""""
input EventSeriesInput {
  adminOrg: OrganizationInput
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformationInput]
  description: String
  entityAvatar: EntityAvatarInput
  hostOrg: OrganizationInput
  name: String
  ownerOrg: OrganizationInput
  status: Status
  updatedAt: Instant
  uuid: String
}

""""""
input EventSeriesSearchQueryInput {
  adminOrgUuid: [String]
  anyOrgUuid: [String]
  emailNetwork: String
  eventTaskUuid: [String]
  hostOrgUuid: [String]
  inMyReports: Boolean
  ownerOrgUuid: [String]
  pageNum: Int
  pageSize: Int
  sortBy: EventSeriesSearchSortBy
  sortOrder: SortOrder
  status: Status
  subscribed: Boolean
  text: String
}

""""""
enum EventSeriesSearchSortBy {
  CREATED_AT
  NAME
}

""""""
enum EventType {
  CONFERENCE
  EXERCISE
  OTHER
  VISIT_BAN
}

""""""
type GenericRelatedObject {
  objectUuid: String
  relatedObject: RelatableObject
  relatedObjectType: String
  relatedObjectUuid: String
}

""""""
input GenericRelatedObjectInput {
  objectUuid: String
  relatedObjectType: String
  relatedObjectUuid: String
}

scalar Instant

""""""
type Location {
  approvalSteps: [ApprovalStep]
  ascendantLocations(query: LocationSearchQueryInput): [Location]
  assessments: [Assessment]
  attachments: [Attachment]
  childrenLocations(query: LocationSearchQueryInput): [Location]
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformation]
  descendantLocations(query: LocationSearchQueryInput): [Location]
  description: String
  digram: String
  entityAvatar: EntityAvatar
  isSubscribed: Boolean
  lat: Float
  lng: Float
  name: String
  notes: [Note]
  parentLocations(query: LocationSearchQueryInput): [Location]
  planningApprovalSteps: [ApprovalStep]
  status: Status
  trigram: String
  type: LocationType
  updatedAt: Instant
  uuid: String
}

""""""
input LocationInput {
  approvalSteps: [ApprovalStepInput]
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformationInput]
  description: String
  digram: String
  entityAvatar: EntityAvatarInput
  lat: Float
  lng: Float
  name: String
  parentLocations: [LocationInput]
  planningApprovalSteps: [ApprovalStepInput]
  status: Status
  trigram: String
  type: LocationType
  updatedAt: Instant
  uuid: String
}

""""""
input LocationSearchQueryInput {
  emailNetwork: String
  inMyReports: Boolean
  locationRecurseStrategy: RecurseStrategy
  locationUuid: [String]
  pageNum: Int
  pageSize: Int
  sortBy: LocationSearchSortBy
  sortOrder: SortOrder
  status: Status
  subscribed: Boolean
  text: String
  type: LocationType
}

""""""
enum LocationSearchSortBy {
  CREATED_AT
  NAME
  RECENT
}

""""""
enum LocationType {
  COUNTRY
  GEOGRAPHICAL_AREA
  PHYSICAL_LOCATION
  POINT_LOCATION
  VIRTUAL_LOCATION
  _PLACEHOLDER_3_ @deprecated(reason: "Deprecated")
  _PLACEHOLDER_4_ @deprecated(reason: "Deprecated")
}

"""A 64-bit signed integer"""
scalar Long

"""Built-in scalar for map-like structures"""
scalar Map_String_ObjectScalar

""""""
type MartImportedReport {
  errors: String
  person: Person
  receivedAt: Instant
  report: Report
  sequence: Long
  state: State
  submittedAt: Instant
}

""""""
input MartImportedReportSearchQueryInput {
  inMyReports: Boolean
  pageNum: Int
  pageSize: Int
  personUuid: String
  reportUuid: String
  sequences: [Long]
  sortBy: MartImportedReportSearchSortBy
  sortOrder: SortOrder
  state: State
  status: Status
  text: String
}

""""""
enum MartImportedReportSearchSortBy {
  RECEIVED_AT
  SEQUENCE
  SUBMITTED_AT
}

"""Mutation root"""
type Mutation {
  addComment(comment: CommentInput, uuid: String): Comment
  approvePerson(uuid: String): Int
  approveReport(comment: CommentInput, uuid: String): Int!
  clearCache: String
  createAccessToken(accessToken: AccessTokenInput): Int
  createAssessment(assessment: AssessmentInput): Assessment
  createAttachment(attachment: AttachmentInput): String
  createAuthorizationGroup(authorizationGroup: AuthorizationGroupInput): AuthorizationGroup
  createEvent(event: EventInput): Event
  createEventSeries(eventSeries: EventSeriesInput): EventSeries
  createLocation(location: LocationInput): Location
  createNote(note: NoteInput): Note
  createOrUpdateEntityAvatar(entityAvatar: EntityAvatarInput): Int
  createOrganization(organization: OrganizationInput): Organization
  createPerson(person: PersonInput): Person
  createPosition(position: PositionInput): Position
  createReport(report: ReportInput): Report
  createSavedSearch(savedSearch: SavedSearchInput): SavedSearch
  createSubscription(subscription: SubscriptionInput): Subscription
  createTask(task: TaskInput): Task
  deleteAccessToken(accessToken: AccessTokenInput): Int
  deleteAssessment(uuid: String): Int
  deleteAttachment(uuid: String): Int
  deleteEntityAvatar(relatedObjectType: String, relatedObjectUuid: String): Int
  deleteNote(uuid: String): Int
  deleteObjectSubscription(uuid: String): Int
  deletePerson(uuid: String): Int
  deletePersonFromPosition(uuid: String): Int
  deletePosition(uuid: String): Int
  deleteReport(uuid: String): Int
  deleteSavedSearch(uuid: String): Int
  deleteSubscription(uuid: String): Int
  emailReport(email: AnetEmailInput, uuid: String): Int
  emailRollup(email: AnetEmailInput, endDate: Instant, orgType: RollupGraphType, orgUuid: String, startDate: Instant): Int
  mergeLocations(loserUuid: String, winnerLocation: LocationInput): Int
  mergeOrganizations(loserUuid: String, winnerOrganization: OrganizationInput): Int
  mergePeople(loserUuid: String, winnerPerson: PersonInput): Int
  mergePositions(loserUuid: String, winnerPosition: PositionInput): Int
  mergeTasks(loserUuid: String, winnerTask: TaskInput): Int
  publishReport(uuid: String): Int!
  putPersonInPosition(person: PersonInput, uuid: String): Int!
  rejectReport(comment: CommentInput, uuid: String): Int!
  reloadDictionary: String
  saveAdminSettings(settings: [AdminSettingInput]): Int
  submitReport(uuid: String): Int!
  unpublishReport(uuid: String): Int
  updateAccessToken(accessToken: AccessTokenInput): Int
  updateAssessment(assessment: AssessmentInput): Assessment
  updateAssociatedPosition(position: PositionInput): Int
  updateAttachment(attachment: AttachmentInput): String
  updateAuthorizationGroup(authorizationGroup: AuthorizationGroupInput): Int
  updateEvent(event: EventInput): Int
  updateEventSeries(eventSeries: EventSeriesInput): Int
  updateLocation(location: LocationInput): Int
  updateMe(person: PersonInput): Int
  updateNote(note: NoteInput): Note
  updateOrganization(organization: OrganizationInput): Int
  updatePerson(person: PersonInput): Int
  updatePersonHistory(person: PersonInput): Int!
  updatePosition(position: PositionInput): Int
  updatePositionHistory(position: PositionInput): Int!
  updateReport(report: ReportInput, sendEditEmail: Boolean = true): Report
  updateReportAssessments(assessments: [AssessmentInput], reportUuid: String): Int!
  updateSavedSearch(savedSearch: SavedSearchInput): Int
  updateTask(task: TaskInput): Int
}

""""""
type Note {
  author: Person
  createdAt: Instant
  noteRelatedObjects: [GenericRelatedObject]
  text: String
  updatedAt: Instant
  uuid: String
}

""""""
input NoteInput {
  author: PersonInput
  createdAt: Instant
  noteRelatedObjects: [GenericRelatedObjectInput]
  text: String
  updatedAt: Instant
  uuid: String
}

""""""
type Organization {
  administratingPositions: [Position]
  app6amplifier: String
  app6context: String
  app6entity: String
  app6entitySubtype: String
  app6entityType: String
  app6hq: String
  app6sectorOneModifier: String
  app6sectorTwoModifier: String
  app6standardIdentity: String
  app6symbolSet: String
  approvalSteps: [ApprovalStep]
  ascendantOrgs(query: OrganizationSearchQueryInput): [Organization]
  assessments: [Assessment]
  attachments: [Attachment]
  authorizationGroups: [AuthorizationGroup]
  childrenOrgs(query: OrganizationSearchQueryInput): [Organization]
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformation]
  descendantOrgs(query: OrganizationSearchQueryInput): [Organization]
  emailAddresses(network: String): [EmailAddress]
  entityAvatar: EntityAvatar
  identificationCode: String
  isSubscribed: Boolean
  location: Location
  longName: String
  notes: [Note]
  parentOrg: Organization
  planningApprovalSteps: [ApprovalStep]
  positions(query: PositionSearchQueryInput): [Position]
  profile: String
  shortName: String
  status: Status
  tasks: [Task]
  updatedAt: Instant
  uuid: String
}

""""""
input OrganizationInput {
  administratingPositions: [PositionInput]
  app6amplifier: String
  app6context: String
  app6entity: String
  app6entitySubtype: String
  app6entityType: String
  app6hq: String
  app6sectorOneModifier: String
  app6sectorTwoModifier: String
  app6standardIdentity: String
  app6symbolSet: String
  approvalSteps: [ApprovalStepInput]
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformationInput]
  emailAddresses: [EmailAddressInput]
  entityAvatar: EntityAvatarInput
  identificationCode: String
  location: LocationInput
  longName: String
  parentOrg: OrganizationInput
  planningApprovalSteps: [ApprovalStepInput]
  profile: String
  shortName: String
  status: Status
  tasks: [TaskInput]
  updatedAt: Instant
  uuid: String
}

""""""
input OrganizationSearchQueryInput {
  assessment: AssessmentSearchQueryInput
  emailNetwork: String
  hasParentOrg: Boolean
  hasProfile: Boolean
  inMyReports: Boolean
  locationRecurseStrategy: RecurseStrategy
  locationUuid: [String]
  orgRecurseStrategy: RecurseStrategy
  pageNum: Int
  pageSize: Int
  parentOrgUuid: [String]
  sortBy: OrganizationSearchSortBy
  sortOrder: SortOrder
  status: Status
  subscribed: Boolean
  text: String
}

""""""
enum OrganizationSearchSortBy {
  CREATED_AT
  NAME
  TYPE
}

""""""
type Person {
  assessments: [Assessment]
  attachments: [Attachment]
  attendedReports(query: ReportSearchQueryInput): AnetBeanList_Report
  authoredReports(query: ReportSearchQueryInput): AnetBeanList_Report
  authorizationGroups: [AuthorizationGroup]
  biography: String
  code: String
  country: Location
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformation]
  emailAddresses(network: String): [EmailAddress]
  endOfTourDate: Instant
  entityAvatar: EntityAvatar
  gender: String
  isSubscribed: Boolean
  name: String
  notes: [Note]
  obsoleteCountry: String
  pendingVerification: Boolean
  phoneNumber: String
  position: Position
  previousPositions: [PersonPositionHistory]
  rank: String
  status: Status
  updatedAt: Instant
  user: Boolean
  users: [User]
  uuid: String
}

""""""
input PersonInput {
  biography: String
  code: String
  country: LocationInput
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformationInput]
  emailAddresses: [EmailAddressInput]
  endOfTourDate: Instant
  entityAvatar: EntityAvatarInput
  gender: String
  name: String
  obsoleteCountry: String
  pendingVerification: Boolean
  phoneNumber: String
  position: PositionInput
  previousPositions: [PersonPositionHistoryInput]
  rank: String
  status: Status
  updatedAt: Instant
  user: Boolean
  users: [UserInput]
  uuid: String
}

""""""
type PersonPositionHistory {
  createdAt: Instant
  endTime: Instant
  person: Person
  position: Position
  startTime: Instant
  updatedAt: Instant
}

""""""
input PersonPositionHistoryInput {
  createdAt: Instant
  endTime: Instant
  person: PersonInput
  position: PositionInput
  startTime: Instant
  updatedAt: Instant
}

""""""
input PersonSearchQueryInput {
  assessment: AssessmentSearchQueryInput
  countryUuid: String
  emailNetwork: String
  endOfTourDateEnd: Instant
  endOfTourDateStart: Instant
  hasBiography: Boolean
  inMyReports: Boolean
  locationRecurseStrategy: RecurseStrategy
  locationUuid: [String]
  matchPositionName: Boolean
  orgRecurseStrategy: RecurseStrategy
  orgUuid: [String]
  pageNum: Int
  pageSize: Int
  pendingVerification: Boolean
  positionType: [PositionType]
  rank: String
  sortBy: PersonSearchSortBy
  sortOrder: SortOrder
  status: Status
  subscribed: Boolean
  text: String
}

""""""
enum PersonSearchSortBy {
  CREATED_AT
  NAME
  RANK
  RECENT
}

""""""
type Position {
  assessments: [Assessment]
  associatedPositions: [Position]
  attachments: [Attachment]
  authorizationGroups: [AuthorizationGroup]
  authorizationGroupsAdministrated: [AuthorizationGroup]
  code: String
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformation]
  description: String
  emailAddresses(network: String): [EmailAddress]
  entityAvatar: EntityAvatar
  isApprover: Boolean
  isSubscribed: Boolean
  location: Location
  name: String
  notes: [Note]
  organization: Organization
  organizationsAdministrated: [Organization]
  person: Person
  previousPeople: [PersonPositionHistory]
  responsibleTasks(query: TaskSearchQueryInput): [Task]
  role: PositionRole
  status: Status
  superuserType: SuperuserType
  type: PositionType
  updatedAt: Instant
  uuid: String
}

""""""
input PositionInput {
  associatedPositions: [PositionInput]
  code: String
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformationInput]
  description: String
  emailAddresses: [EmailAddressInput]
  entityAvatar: EntityAvatarInput
  location: LocationInput
  name: String
  organization: OrganizationInput
  organizationsAdministrated: [OrganizationInput]
  person: PersonInput
  previousPeople: [PersonPositionHistoryInput]
  role: PositionRole
  status: Status
  superuserType: SuperuserType
  type: PositionType
  updatedAt: Instant
  uuid: String
}

""""""
enum PositionRole {
  DEPUTY
  LEADER
  MEMBER
}

""""""
input PositionSearchQueryInput {
  authorizationGroupUuid: String
  emailNetwork: String
  hasCounterparts: Boolean
  hasPendingAssessments: Boolean
  inMyReports: Boolean
  isFilled: Boolean
  locationRecurseStrategy: RecurseStrategy
  locationUuid: [String]
  matchPersonName: Boolean
  orgRecurseStrategy: RecurseStrategy
  organizationUuid: [String]
  pageNum: Int
  pageSize: Int
  sortBy: PositionSearchSortBy
  sortOrder: SortOrder
  status: Status
  subscribed: Boolean
  text: String
  type: [PositionType]
}

""""""
enum PositionSearchSortBy {
  CODE
  CREATED_AT
  NAME
}

""""""
enum PositionType {
  ADMINISTRATOR
  REGULAR
  SUPERUSER
  _PLACEHOLDER_1_ @deprecated(reason: "Deprecated")
}

"""Query root"""
type Query {
  accessTokenList: [AccessToken]
  adminSettings: [AdminSetting]
  advisorReportInsights(orgUuid: String = "-1", weeksAgo: Int = 3): [AdvisorReportsEntry]
  approvalStepInUse(uuid: String): Boolean!
  attachment(uuid: String): Attachment
  attachmentList(query: AttachmentSearchQueryInput): AnetBeanList_Attachment
  authorizationGroup(uuid: String): AuthorizationGroup
  authorizationGroupList(query: AuthorizationGroupSearchQueryInput): AnetBeanList_AuthorizationGroup
  event(uuid: String): Event
  eventList(query: EventSearchQueryInput): AnetBeanList_Event
  eventSeries(uuid: String): EventSeries
  eventSeriesList(query: EventSeriesSearchQueryInput): AnetBeanList_EventSeries
  location(uuid: String): Location
  locationList(query: LocationSearchQueryInput): AnetBeanList_Location
  locations(uuids: [String]): [Location]
  martImportedReportList(query: MartImportedReportSearchQueryInput): AnetBeanList_MartImportedReport
  me: Person
  mySearches(forHomepage: Boolean = false): [SavedSearch]
  mySubscriptionUpdates(query: SubscriptionUpdateSearchQueryInput): AnetBeanList_SubscriptionUpdate
  mySubscriptions(query: SubscriptionSearchQueryInput): AnetBeanList_Subscription
  organization(uuid: String): Organization
  organizationList(query: OrganizationSearchQueryInput): AnetBeanList_Organization
  organizations(uuids: [String]): [Organization]
  pendingEmails(pageNum: Int = 0, pageSize: Int = 0): AnetBeanList_AnetEmail
  person(uuid: String): Person
  personList(query: PersonSearchQueryInput): AnetBeanList_Person
  position(uuid: String): Position
  positionList(query: PositionSearchQueryInput): AnetBeanList_Position
  projectVersion: String
  recentActivities: RecentActivities
  report(uuid: String): Report
  reportList(query: ReportSearchQueryInput): AnetBeanList_Report
  rollupGraph(endDate: Instant, orgType: RollupGraphType, orgUuid: String, startDate: Instant): [RollupGraph]
  showRollupEmail(endDate: Instant, orgType: RollupGraphType, orgUuid: String, showText: Boolean = false, startDate: Instant): String
  task(uuid: String): Task
  taskList(query: TaskSearchQueryInput): AnetBeanList_Task
  tasks(uuids: [String]): [Task]
  userActivityList(query: UserActivitySearchQueryInput): AnetBeanList_UserActivity
}

""""""
type RecentActivities {
  byActivity: [RecentUserActivity]
  byUser: [RecentUserActivity]
}

""""""
type RecentUserActivity {
  activity: Activity
  user: Person
}

""""""
enum RecurseStrategy {
  CHILDREN
  NONE
  PARENTS
}

""""""
union RelatableObject = AuthorizationGroup | Event | EventSeries | Location | Organization | Person | Position | Report | ReportPerson | Task

""""""
type Report {
  advisorOrg: Organization
  approvalStep: ApprovalStep
  assessments: [Assessment]
  atmosphere: Atmosphere
  atmosphereDetails: String
  attachments: [Attachment]
  attendees: [ReportPerson]
  authorizedMembers: [GenericRelatedObject]
  authors: [ReportPerson]
  cancelledReason: ReportCancelledReason
  classification: String
  comments: [Comment]
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformation]
  duration: Int
  engagementDate: Instant
  engagementDayOfWeek: Int
  engagementStatus: [EngagementStatus]
  event: Event
  exsum: String
  intent: String
  interlocutorOrg: Organization
  isSubscribed: Boolean
  keyOutcomes: String
  location: Location
  nextSteps: String
  notes: [Note]
  primaryAdvisor: ReportPerson
  primaryInterlocutor: ReportPerson
  releasedAt: Instant
  reportPeople: [ReportPerson]
  reportSensitiveInformation: ReportSensitiveInformation
  reportText: String
  state: ReportState
  tasks: [Task]
  updatedAt: Instant
  uuid: String
  workflow: [ReportAction]
}

""""""
type ReportAction {
  createdAt: Instant
  person: Person
  planned: Boolean!
  report: Report
  step: ApprovalStep
  type: ActionType
  updatedAt: Instant
}

""""""
enum ReportCancelledReason {
  CANCELLED_BY_ADVISOR
  CANCELLED_BY_INTERLOCUTOR
  CANCELLED_DUE_TO_AVAILABILITY_OF_INTERPRETERS
  CANCELLED_DUE_TO_FORCE_PROTECTION
  CANCELLED_DUE_TO_NETWORK_ISSUES
  CANCELLED_DUE_TO_ROUTES
  CANCELLED_DUE_TO_THREAT
  CANCELLED_DUE_TO_TRANSPORTATION
  NO_REASON_GIVEN
}

""""""
input ReportInput {
  advisorOrg: OrganizationInput
  approvalStep: ApprovalStepInput
  atmosphere: Atmosphere
  atmosphereDetails: String
  authorizedMembers: [GenericRelatedObjectInput]
  cancelledReason: ReportCancelledReason
  classification: String
  comments: [CommentInput]
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformationInput]
  duration: Int
  engagementDate: Instant
  engagementDayOfWeek: Int
  event: EventInput
  exsum: String
  intent: String
  interlocutorOrg: OrganizationInput
  keyOutcomes: String
  location: LocationInput
  nextSteps: String
  releasedAt: Instant
  reportPeople: [ReportPersonInput]
  reportSensitiveInformation: ReportSensitiveInformationInput
  reportText: String
  state: ReportState
  tasks: [TaskInput]
  updatedAt: Instant
  uuid: String
}

""""""
type ReportPerson {
  assessments: [Assessment]
  attachments: [Attachment]
  attendedReports(query: ReportSearchQueryInput): AnetBeanList_Report
  attendee: Boolean!
  author: Boolean!
  authoredReports(query: ReportSearchQueryInput): AnetBeanList_Report
  authorizationGroups: [AuthorizationGroup]
  biography: String
  code: String
  country: Location
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformation]
  emailAddresses(network: String): [EmailAddress]
  endOfTourDate: Instant
  entityAvatar: EntityAvatar
  gender: String
  interlocutor: Boolean!
  isSubscribed: Boolean
  name: String
  notes: [Note]
  obsoleteCountry: String
  pendingVerification: Boolean
  phoneNumber: String
  position: Position
  previousPositions: [PersonPositionHistory]
  primary: Boolean!
  rank: String
  status: Status
  updatedAt: Instant
  user: Boolean
  users: [User]
  uuid: String
}

""""""
input ReportPersonInput {
  attendee: Boolean!
  author: Boolean!
  biography: String
  code: String
  country: LocationInput
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformationInput]
  emailAddresses: [EmailAddressInput]
  endOfTourDate: Instant
  entityAvatar: EntityAvatarInput
  gender: String
  interlocutor: Boolean!
  name: String
  obsoleteCountry: String
  pendingVerification: Boolean
  phoneNumber: String
  position: PositionInput
  previousPositions: [PersonPositionHistoryInput]
  primary: Boolean!
  rank: String
  status: Status
  updatedAt: Instant
  user: Boolean
  users: [UserInput]
  uuid: String
}

""""""
input ReportSearchQueryInput {
  atmosphere: Atmosphere
  attendeePositionUuid: String
  attendeeUuid: String
  authorPositionUuid: String
  authorUuid: String
  authorizationGroupUuid: [String]
  cancelledReason: ReportCancelledReason
  classification: String
  createdAtEnd: Instant
  createdAtStart: Instant
  emailNetwork: String
  engagementDateEnd: Instant
  engagementDateStart: Instant
  engagementDayOfWeek: Int
  engagementStatus: [EngagementStatus]
  eventUuid: String
  inMyReports: Boolean
  includeAllDrafts: Boolean
  includeEngagementDayOfWeek: Boolean
  locationRecurseStrategy: RecurseStrategy
  locationUuid: [String]
  orgRecurseStrategy: RecurseStrategy
  orgUuid: [String]
  pageNum: Int
  pageSize: Int
  pendingApprovalOf: String
  releasedAtEnd: Instant
  releasedAtStart: Instant
  sensitiveInfo: Boolean
  sortBy: ReportSearchSortBy
  sortOrder: SortOrder
  state: [ReportState]
  status: Status
  subscribed: Boolean
  taskUuid: [String]
  text: String
  updatedAtEnd: Instant
  updatedAtStart: Instant
}

""""""
enum ReportSearchSortBy {
  CREATED_AT
  ENGAGEMENT_DATE
  RELEASED_AT
  UPDATED_AT
}

""""""
type ReportSensitiveInformation {
  createdAt: Instant
  text: String
  updatedAt: Instant
  uuid: String
}

""""""
input ReportSensitiveInformationInput {
  createdAt: Instant
  text: String
  updatedAt: Instant
  uuid: String
}

""""""
enum ReportState {
  APPROVED
  CANCELLED
  DRAFT
  FUTURE @deprecated(reason: "Deprecated")
  PENDING_APPROVAL
  PUBLISHED
  REJECTED
}

""""""
type RollupGraph {
  cancelled: Int!
  org: Organization
  published: Int!
}

""""""
enum RollupGraphType {
  ADVISOR
  INTERLOCUTOR
}

""""""
type SavedSearch {
  createdAt: Instant
  displayInHomepage: Boolean
  homepagePriority: Float
  name: String
  objectType: SearchObjectType
  owner: Person
  priority: Float
  query: String
  updatedAt: Instant
  uuid: String
}

""""""
input SavedSearchInput {
  createdAt: Instant
  displayInHomepage: Boolean
  homepagePriority: Float
  name: String
  objectType: SearchObjectType
  owner: PersonInput
  priority: Float
  query: String
  updatedAt: Instant
  uuid: String
}

""""""
enum SearchObjectType {
  ATTACHMENTS
  AUTHORIZATION_GROUPS
  EVENTS
  LOCATIONS
  ORGANIZATIONS
  PEOPLE
  POSITIONS
  REPORTS
  TASKS
}

""""""
enum SearchType {
  ORGANIZATION
  PERSON
  TOP_LEVEL_ORGANIZATION
}

""""""
enum SortOrder {
  ASC
  DESC
}

""""""
enum State {
  NOT_RECEIVED
  NOT_SUBMITTED
  SUBMITTED_OK
  SUBMITTED_WARNINGS
}

""""""
enum Status {
  ACTIVE
  INACTIVE
}

""""""
union SubscribableObject = AuthorizationGroup | Event | EventSeries | Location | Organization | Person | Position | Report | ReportPerson | Task

""""""
type Subscription {
  createdAt: Instant
  subscribedObject: SubscribableObject
  subscribedObjectType: String
  subscribedObjectUuid: String
  subscriber: Position
  updatedAt: Instant
  uuid: String
}

""""""
input SubscriptionInput {
  createdAt: Instant
  subscribedObjectType: String
  subscribedObjectUuid: String
  subscriber: PositionInput
  updatedAt: Instant
  uuid: String
}

""""""
input SubscriptionSearchQueryInput {
  inMyReports: Boolean
  pageNum: Int
  pageSize: Int
  sortBy: SubscriptionSearchSortBy
  sortOrder: SortOrder
  status: Status
  text: String
}

""""""
enum SubscriptionSearchSortBy {
  CREATED_AT
}

""""""
type SubscriptionUpdate {
  createdAt: Instant
  isNote: Boolean!
  subscription: Subscription
  updatedObject: SubscribableObject
  updatedObjectType: String
  updatedObjectUuid: String
}

""""""
input SubscriptionUpdateSearchQueryInput {
  inMyReports: Boolean
  pageNum: Int
  pageSize: Int
  sortBy: SubscriptionUpdateSearchSortBy
  sortOrder: SortOrder
  status: Status
  text: String
}

""""""
enum SubscriptionUpdateSearchSortBy {
  CREATED_AT
}

""""""
enum SuperuserType {
  CAN_CREATE_OR_EDIT_ANY_ORGANIZATION_OR_TASK
  CAN_CREATE_TOP_LEVEL_ORGANIZATIONS_OR_TASKS
  REGULAR
}

""""""
type Task {
  approvalSteps: [ApprovalStep]
  ascendantTasks(query: TaskSearchQueryInput): [Task]
  assessments: [Assessment]
  attachments: [Attachment]
  category: String
  childrenTasks(query: TaskSearchQueryInput): [Task]
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformation]
  descendantTasks(query: TaskSearchQueryInput): [Task]
  description: String
  isSubscribed: Boolean
  longName: String
  notes: [Note]
  parentTask: Task
  plannedCompletion: Instant
  planningApprovalSteps: [ApprovalStep]
  projectedCompletion: Instant
  reports(query: ReportSearchQueryInput): [Report]
  responsiblePositions: [Position]
  selectable: Boolean
  shortName: String
  status: Status
  taskedOrganizations: [Organization]
  updatedAt: Instant
  uuid: String
}

""""""
input TaskInput {
  approvalSteps: [ApprovalStepInput]
  category: String
  createdAt: Instant
  customFields: String
  customSensitiveInformation: [CustomSensitiveInformationInput]
  description: String
  longName: String
  parentTask: TaskInput
  plannedCompletion: Instant
  planningApprovalSteps: [ApprovalStepInput]
  projectedCompletion: Instant
  responsiblePositions: [PositionInput]
  selectable: Boolean
  shortName: String
  status: Status
  taskedOrganizations: [OrganizationInput]
  updatedAt: Instant
  uuid: String
}

""""""
input TaskSearchQueryInput {
  assessment: AssessmentSearchQueryInput
  category: String
  emailNetwork: String
  eventUuid: String
  inMyReports: Boolean
  isAssigned: Boolean
  orgRecurseStrategy: RecurseStrategy
  pageNum: Int
  pageSize: Int
  parentTaskRecurseStrategy: RecurseStrategy
  parentTaskUuid: [String]
  plannedCompletionEnd: Instant
  plannedCompletionStart: Instant
  projectedCompletionEnd: Instant
  projectedCompletionStart: Instant
  responsiblePositionUuid: String
  selectable: Boolean
  sortBy: TaskSearchSortBy
  sortOrder: SortOrder
  status: Status
  subscribed: Boolean
  taskedOrgUuid: [String]
  text: String
}

""""""
enum TaskSearchSortBy {
  CATEGORY
  CREATED_AT
  NAME
  RECENT
}

""""""
enum TokenScope {
  GRAPHQL
  NVG
}

""""""
type User {
  createdAt: Instant
  domainUsername: String
  updatedAt: Instant
  uuid: String
}

""""""
type UserActivity {
  count: Long!
  organization: Organization
  organizationUuid: String
  person: Person
  personUuid: String
  visitedAt: Instant
}

""""""
input UserActivitySearchQueryInput {
  aggregationPeriod: AggregationPeriod
  aggregationType: AggregationType
  endDate: Instant
  pageNum: Int
  pageSize: Int
  searchType: SearchType
  showDeleted: Boolean
  sortBy: UserActivitySearchSortBy
  sortOrder: SortOrder
  startDate: Instant
  status: Status
  text: String
}

""""""
enum UserActivitySearchSortBy {
  COUNT
  NONE
}

""""""
input UserInput {
  createdAt: Instant
  domainUsername: String
  updatedAt: Instant
  uuid: String
}